{"version":3,"sources":["core/utils/algod/algod.ts","core/home/sign-txn/SignTxn.tsx","core/home/sign-txn/create/button/CreateTxnButton.tsx","core/hooks/useModalVisibilityState.tsx","core/ui/icon/close.svg","core/component/modal/Modal.tsx","core/transaction/transactionConstants.ts","core/home/sign-txn/create/CreateTxn.tsx","core/utils/array/arrayUtils.ts","core/utils/number/numberUtils.ts","core/utils/account/accountUtils.ts","core/utils/storage/pera-wallet/peraWalletTypes.ts","core/utils/storage/storageUtils.ts","core/home/account-balance/AccountBalance.tsx","core/utils/string/stringUtils.ts","core/component/toast/PeraToast.tsx","core/hooks/useGetAccountDetailRequest/useGetAccountDetailRequest.tsx","core/home/Home.tsx","core/hooks/useOnWindowResize.tsx","core/hooks/useSetDynamicVh.tsx","core/app/App.tsx","reportWebVitals.js","index.tsx","core/home/sign-txn/util/signTxnUtils.tsx","core/network/fetcher/FetcherError.ts","core/network/fetcher/fetcherUtils.ts","core/network/fetcher/Fetcher.ts","core/utils/pera/api/peraApiManager.ts","core/utils/object/objectUtils.ts","core/utils/url/urlUtils.ts","core/hooks/useOnUnmount/useOnUnmount.tsx","core/hooks/useAsyncProcess/useAsyncProcess.tsx","core/utils/pera/api/peraApi.ts"],"names":["ChainType","mainNetClient","algosdk","Algodv2","testNetClient","clientForChain","chain","MainNet","TestNet","Error","apiGetTxnParams","getTransactionParams","do","params","SignTxn","accountAddress","peraWallet","handleSetLog","refecthAccountDetail","useState","isRequestPending","setIsRequestPending","useModalVisibilityState","isModalOpen","openModal","closeModal","customClassName","onClick","address","isOpen","onClose","style","marginTop","items","mainnetScenarios","item","signTransaction","scenario","name","shouldDisplaySpinner","isDisabled","scenarios","display","gap","width","unsignedData","data","Uint8Array","Buffer","from","Date","now","message","signArbitraryData","navigator","userAgent","arbitraryData","signData","signedData","forEach","index","isVerified","verifyBytes","console","log","txnsToSign","transaction","transactionTimeout","transactions","reduce","acc","val","concat","signedTransactions","setTimeout","sendRawTransaction","i","length","slice","CreateTxnButton","txnForm","type","onResetForm","onSetTransactions","toAddress","amount","note","assetIndex","rekeyTo","closeTo","transactionAmount","voteKey","selectionKey","stateProofKey","voteFirst","voteLast","voteKeyDilution","isOnlineKeyregTxn","assetTxnType","unitName","assetName","defaultFrozen","manager","reserve","freeze","clawback","assetURL","total","decimals","runAsyncProcess","useAsyncProcess","assetsRef","useRef","isPending","setPendingState","setDisablingState","useEffect","createPayTransaction","createAxferTransaction","createKeyregTransaction","createAcfgTransaction","suggestedParams","txn","makeAssetCreateTxnWithSuggestedParamsFromObject","makeAssetConfigTxnWithSuggestedParamsFromObject","Number","strictEmptyAddressChecking","makeAssetDestroyTxnWithSuggestedParamsFromObject","makeKeyRegistrationTxnWithSuggestedParamsFromObject","firstRound","lastRound","isValidAddress","undefined","makePaymentTxnWithSuggestedParamsFromObject","to","closeRemainderTo","fetchAssets","txns","assetId","current","results","asset_id","makeAssetTransferTxnWithSuggestedParamsFromObject","push","next","nextRequestUrl","URL","peraApi","getAssets","getSearchParams","search","assetsResponse","setModalVisibility","useCallback","_path","_excluded","_extends","Object","assign","bind","target","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgClose","_ref","svgRef","title","titleId","props","height","viewBox","fill","xmlns","ref","id","d","stroke","strokeWidth","ForwardRef","MODAL_CLOSE_TIMEOUT","parseFloat","getComputedStyle","document","documentElement","getPropertyValue","trim","getParent","querySelector","ReactModal","defaultStyles","setAppElement","Modal","children","closeTimeoutMS","shouldCloseOnOverlayClick","shouldCloseOnEsc","bodyOpenClassName","shouldPreventScrollOnOverlay","otherProps","body","overflow","position","event","stopPropagation","parentSelector","className","classNames","onRequestClose","TXN_DROPDOWN_OPTIONS","ASSET_TXN_TABS","content","CreateTxn","setTransactions","transactionDropdownOption","setTransactionDropdownOption","formState","setFormState","sendBlockchain","setSendBlockchain","contentLabel","marginBottom","label","role","options","selectedOption","onSelect","option","hasDeselectOption","value","onChange","e","currentTarget","isToggledOn","onToggle","initialActiveTabIndex","onTabChange","handleAssetTabChange","getAssetTransactionForms","renderForm","_a","newTxns","transactionChunks","array","chunkSize","separatedArray","arrayAmount","separateIntoChunks","transactionChunk","assignGroupID","map","toSign","error","txnType","signedTransaction","waitForConfirmation","txID","DEFAULT_NUMBER_FORMAT_LOCALE_PREFERENCE","getAccountBalanceText","account","numberFormatter","providedOptions","locale","otherOptions","isCurrencyFormatting","shouldShortenLargeNumbers","currency","maximumFractionDigits","minimumFractionDigits","currencyDisplay","omitKeys","Intl","NumberFormat","language","format","x","toLocaleString","currencyFormattingError","formattedValue","is","NaN","Math","pow","replace","formatNumber","microalgosToAlgos","PERA_WALLET_LOCAL_STORAGE_KEYS","getWalletDetailsFromStorage","storedWalletDetails","localStorage","getItem","JSON","parse","AccountBalance","stringToTruncate","accountInformation","walletDetails","substring","toUpperCase","PeraToast","useGetAccountDetailRequest","accountInformationState","state","runGetAccountInformationAsyncProcess","displayToast","useToaster","refetchAccountDetail","Promise","resolve","reject","getAccountInformation","render","isCompactMode","PeraWalletConnect","compactMode","peraOnRamp","PeraOnramp","optInEnabled","Home","chainType","setChainType","chainDropdownSelectedOption","setChainDropdownSelectedOption","setAccountAddress","isConnectedToPeraWallet","isConnectCompactMode","setConnectCompactMode","reconnectSession","then","accounts","connector","on","catch","peraApiManager","updateFetcher","handleSelectChainType","setItem","addFunds","OPT_IN_REQUEST","addr","assetID","createAssetOptInTxn","signedTxn","close","ADD_FUNDS_COMPLETED","ADD_FUNDS_FAILED","disconnect","connect","newAccounts","timeout","DEFAULT_OPTIONS","debounceTime","useOnWindowResize","callback","timeoutId","callbackRef","window","addEventListener","handleResize","removeEventListener","clearTimeout","useSetDynamicVhValue","setVhVariable","setProperty","innerHeight","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById","AssetTransactionType","testAccounts","mnemonicToSecretKey","getAssetIndex","Transfer","Close","getAppIndex","singlePayTxn","singlePayTxnWithClose","singlePayTxnWithRekey","singlePayTxnWithRekeyAndClose","singlePayTxnWithInvalidAuthAddress","authAddr","singleAssetOptInTxn","OptIn","singleAssetOptInTxnToInvalidAsset","singleAssetTransferTxn","singleAssetTransferTxnWithClose","singleInvalidAssetTransferTxn","singleAppOptIn","appIndex","makeApplicationOptInTxnFromObject","appArgs","singleAppOptInWithAppRekey","singleAppCall","makeApplicationNoOpTxnFromObject","singleAppCallNoArgs","singleAppCallWithRekey","singleAppCloseOut","makeApplicationCloseOutTxnFromObject","singleAppClearState","makeApplicationClearStateTxnFromObject","singleAppCreate","approvalProgram","clearProgram","makeApplicationCreateTxnFromObject","numGlobalInts","numGlobalByteSlices","numLocalInts","numLocalByteSlices","onComplete","OnApplicationComplete","NoOpOC","singleAppCreateExtraPage","extraPages","singleAppUpdate","makeApplicationUpdateTxnFromObject","singleAppDelete","makeApplicationDeleteTxnFromObject","sign1FromGroupTxn","transferAssetIndex","optInAssetIndex","txn1","txn2","signers","sign2FromGroupTxn","txn3","signGroupWithPayOptinTransfer","signGroupWithPayRekey","signTxnWithAssetClose","closeAssetIndex","signTxnWithRekey","signTxnWithRekeyAndAssetClose","txn4","signGroupOf7","optIn","assetXfer","assetClose","payment","accountClose","accountRekey","accountRekeyAndClose","fullTxnGroup","closeOut","multipleNonAtomicTxns","group1","group2","group3","multipleNonAtomicTxnsForOnlyAssets","multipleNonAtomicTxnsMixed","atomicGroupAndNonAtomicTxnsForOnlyPayment","atomicGroupAndNonAtomicTxnsMixed","multipleAtomicGroupsForOnlyPayment","multipleAtomicGroupsForOnlyAssets","multipleAtomicGroupsWithInvalidAsset","multipleAtomicGroupsMixed1","multipleAtomicGroupsMixed2","multipleAtomicGroupSignOnly2","atomicGroupAndNonAtomicTxnsSignOnly2","atomicNoSignTxn","atomicAndSingleNoSignTxn","txnWithLargeNote","repeat","assetCreateTxnMaxInfoAndRekey","BigInt","assetMetadataHash","assetCreateTxnMinInfo","assetReconfigTxnResetAll","assetReconfigTxnClearAll","assetDeleteTxn","zeroFeeTxnGroup","fee","maxNumberOfTxns","groups","group","j","tooManyTxns","fiveHundredTxns","futureTransaction","minutes","prompt","exactDate","getTime","futureTrxDate","differenceInSeconds","round","blockRound","abs","firstRoundFuture","lastRoundFuture","newSuggestedParams","genesisHash","genesisID","invalidGroupingIssue","txn5","pop","appCallWithBoxes","boxes","invalidAuthAddress","validAuthAddress","invalidSignerAddress","validSignerAddress","swapAlgoToUSDC","swapAlgoToGoETH","depositAlgoFF","poolAlgoUsdcFF","authAlgoGems","buyNFTAlgogems","buyNFTAlgoxNFT","singleZoneTransferTxn","FetcherError","args","statusCode","captureStackTrace","fetchJSONMiddleware","response","json","Fetcher","config","responseMiddlewares","rejectMiddlewares","initOptions","path","baseUrl","bodyParserFromConfig","bodyParser","bodyParserFromOptions","url","isRecord","stringifySearchParams","fetch","ok","middlewares","final","middleware","errorResponse","status","errorResponseJSON","finalError","method","PERA_API_URLS","PERA_API_DEFAULT_OPTIONS","headers","Accept","stringify","getPeraApiBaseURLForNetwork","network","fetcher","obj","newObj","includes","Boolean","Array","isArray","URLSearchParams","toString","fromEntries","entries","useOnUnmount","useLayoutEffect","DEFAULT_INITIAL_ASYNC_PROCESS_STATE","isFetched","initialState","shouldResetDataWhenPending","asyncState","setAsyncState","latestDataRef","isUnmountedRef","asyncStateSetter","promise","responseSerializer","setState","run","signal"],"mappings":"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","file":"static/js/main.8957c232.chunk.js","sourcesContent":["import algosdk from \"algosdk\";\n\nexport enum ChainType {\n  MainNet = \"mainnet\",\n  TestNet = \"testnet\"\n}\n\nconst mainNetClient = new algosdk.Algodv2(\"\", \"https://mainnet-api.algonode.cloud\", \"\");\nconst testNetClient = new algosdk.Algodv2(\"\", \"https://testnet-api.algonode.cloud\", \"\");\n\nfunction clientForChain(chain: ChainType): algosdk.Algodv2 {\n  switch (chain) {\n    case ChainType.MainNet:\n      return mainNetClient;\n    case ChainType.TestNet:\n      return testNetClient;\n    default:\n      throw new Error(`Unknown chain type: ${chain}`);\n  }\n}\n\nasync function apiGetTxnParams(chain: ChainType): Promise<algosdk.SuggestedParams> {\n  const params = await clientForChain(chain).getTransactionParams().do();\n\n  return params;\n}\n\nexport {clientForChain, apiGetTxnParams};\n","import {useState} from \"react\";\nimport {Button, List, ListItem} from \"@hipo/react-ui-toolkit\";\nimport {PeraWalletConnect} from \"@perawallet/connect\";\nimport {PeraWalletArbitraryData, SignerTransaction} from \"@perawallet/connect/dist/util/model/peraWalletModels\";\nimport algosdk from \"algosdk\";\n\nimport {mainnetScenarios, Scenario, scenarios} from \"./util/signTxnUtils\";\nimport {ChainType, clientForChain} from \"../../utils/algod/algod\";\nimport CreateTxn from \"./create/CreateTxn\";\nimport useModalVisibilityState from \"../../hooks/useModalVisibilityState\";\n\ninterface SignTxnProps {\n  accountAddress: string;\n  peraWallet: PeraWalletConnect;\n  handleSetLog: (log: string) => void;\n  chain: ChainType;\n  refecthAccountDetail: () => void;\n}\n\nfunction SignTxn({\n  accountAddress,\n  peraWallet,\n  handleSetLog,\n  chain,\n  refecthAccountDetail\n}: SignTxnProps) {\n  const [isRequestPending, setIsRequestPending] = useState(false);\n  const {isModalOpen, openModal, closeModal} = useModalVisibilityState();\n\n  return (\n    <>\n      <Button customClassName={\"app__button--connect\"} onClick={openModal}>\n        {\"Create Transaction\"}\n      </Button>\n\n      <CreateTxn\n        chain={chain}\n        peraWallet={peraWallet}\n        address={accountAddress}\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n\n      <div style={{marginTop: \"45px\"}}>\n        <h3>{\"Mainnet only, do not sign!\"}</h3>\n        {chain === ChainType.TestNet && <small>{\"Switch to MainNet to see txns\"}</small>}\n\n        <List items={mainnetScenarios} customClassName={\"app__actions\"}>\n          {(item) => (\n            <ListItem>\n              <Button\n                customClassName={\"app__button\"}\n                onClick={() => signTransaction(item.scenario, item.name)}\n                shouldDisplaySpinner={isRequestPending}\n                isDisabled={isRequestPending}>\n                {isRequestPending ? \"Loading...\" : item.name}\n              </Button>\n            </ListItem>\n          )}\n        </List>\n      </div>\n\n      <div style={{marginTop: \"45px\"}}>\n        <h3>{\"Both Networks\"}</h3>\n\n        <List items={scenarios} customClassName={\"app__actions\"}>\n          {(item) => (\n            <ListItem>\n              <Button\n                customClassName={\"app__button\"}\n                onClick={() => signTransaction(item.scenario, item.name)}\n                shouldDisplaySpinner={isRequestPending}\n                isDisabled={isRequestPending}>\n                {isRequestPending ? \"Loading...\" : item.name}\n              </Button>\n            </ListItem>\n          )}\n        </List>\n\n        <div style={{display: \"flex\", gap: \"20px\"}}>\n          <Button\n            customClassName={\"app__button\"}\n            style={{width: \"160px\"}}\n            onClick={signSingleArbitraryData}\n            shouldDisplaySpinner={isRequestPending}\n            isDisabled={isRequestPending}>\n            {isRequestPending ? \"Loading...\" : \"Sign Single Arbitrary Data\"}\n          </Button>\n\n          <Button\n            customClassName={\"app__button\"}\n            style={{width: \"160px\"}}\n            onClick={signMultipleArbitraryData}\n            shouldDisplaySpinner={isRequestPending}\n            isDisabled={isRequestPending}>\n            {isRequestPending ? \"Loading...\" : \"Sign Multiple Arbitrary Data\"}\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n\n  async function signSingleArbitraryData() {\n    const unsignedData = [\n      {\n        data: new Uint8Array(Buffer.from(`timestamp//${Date.now()}`)),\n        message: \"Timestamp confirmation\"\n      }];\n\n    await signArbitraryData(unsignedData);\n  }\n\n  async function signMultipleArbitraryData() {\n    const unsignedData = [\n      {\n        data: new Uint8Array(Buffer.from(`timestamp//${Date.now()}`)),\n        message: \"Timestamp confirmation\"\n      },\n      {\n        data: new Uint8Array(Buffer.from(`agent//${navigator.userAgent}`)),\n        message: \"User agent confirmation\"\n      }\n    ];\n\n    await signArbitraryData(unsignedData);\n  }\n\n  async function signArbitraryData(arbitraryData: PeraWalletArbitraryData[]) {\n    try {\n      const signedData: Uint8Array[] = await peraWallet.signData(\n        arbitraryData,\n        accountAddress\n      );\n\n      arbitraryData.forEach((data, index) => {\n        const isVerified = algosdk.verifyBytes(data.data, signedData[index], accountAddress)\n\n        console.log({data, signedData: signedData[index], isVerified});\n\n        if (!isVerified) {\n          handleSetLog(`Arbitrary data did not match with signed data!`);\n        }\n      });\n\n      console.log({signedData});\n      handleSetLog(\"Data signed successfully\");\n    } catch (error) {\n      console.log(error)\n      handleSetLog(`${error}`);\n    }\n  }\n\n  async function signTransaction(scenario: Scenario, name: string) {\n    setIsRequestPending(true);\n\n    try {\n      const {transaction: txnsToSign, transactionTimeout} = await scenario(\n        chain,\n        accountAddress\n      );\n\n      const transactions: SignerTransaction[] = txnsToSign.reduce(\n        (acc, val) => acc.concat(val),\n        []\n      );\n\n      const signedTransactions = await peraWallet.signTransaction([transactions]);\n\n      console.log({transactions, signedTransactions});\n\n      handleSetLog(`Transaction signed successfully: ${name}`);\n\n      if (transactionTimeout) {\n        setTimeout(async () => {\n          await clientForChain(chain).sendRawTransaction(signedTransactions).do();\n          handleSetLog(`Transaction sended network: ${name}`);\n        }, transactionTimeout);\n      } else {\n        for (let i = 0; i < txnsToSign.length; i++) {\n          await clientForChain(chain)\n            // eslint-disable-next-line no-magic-numbers\n            .sendRawTransaction(signedTransactions.slice(i * 16, (i + 1) * 16))\n            .do();\n        }\n\n        handleSetLog(`Transaction sended network: ${name}`);\n      }\n    } catch (error) {\n      handleSetLog(`${error}`);\n      console.log(error);\n    } finally {\n      setIsRequestPending(false);\n      refecthAccountDetail();\n    }\n  }\n}\n\nexport default SignTxn;\n","import {useEffect, useRef, useState} from \"react\";\nimport {Button} from \"@hipo/react-ui-toolkit\";\nimport algosdk, {Transaction, isValidAddress} from \"algosdk\";\nimport {SignerTransaction} from \"@perawallet/connect/dist/util/model/peraWalletModels\";\n\nimport useAsyncProcess from \"../../../../hooks/useAsyncProcess/useAsyncProcess\";\nimport peraApi, {Asset} from \"../../../../utils/pera/api/peraApi\";\nimport {getSearchParams} from \"../../../../utils/url/urlUtils\";\nimport {TxnForm} from \"../CreateTxn\";\nimport {ChainType, apiGetTxnParams} from \"../../../../utils/algod/algod\";\nimport {PeraTransactionType} from \"../../../../transaction/transactionTypes\";\n\nfunction CreateTxnButton({\n  txnForm,\n  type,\n  chain,\n  onResetForm,\n  onSetTransactions\n}: {\n  txnForm: TxnForm;\n  type: PeraTransactionType;\n  chain: ChainType;\n  onResetForm: VoidFunction;\n  onSetTransactions: (txns: SignerTransaction[]) => void;\n}) {\n  const {\n    address,\n    toAddress,\n    amount,\n    note,\n    assetIndex,\n    rekeyTo,\n    closeTo,\n    transactionAmount,\n\n    // keyreg\n    voteKey,\n    selectionKey,\n    stateProofKey,\n    voteFirst,\n    voteLast,\n    voteKeyDilution,\n    isOnlineKeyregTxn,\n\n    // acfg\n\n    assetTxnType,\n    unitName,\n    assetName,\n    defaultFrozen,\n    manager,\n    reserve,\n    freeze,\n    clawback,\n    assetURL,\n    total,\n    decimals\n  } = txnForm;\n  const {runAsyncProcess} = useAsyncProcess<ListRequestResponse<Asset>>();\n  const assetsRef = useRef<ListRequestResponse<Asset>>();\n  const [isPending, setPendingState] = useState(false);\n  const [isDisabled, setDisablingState] = useState(false);\n\n  useEffect(() => {\n    if (type === \"keyreg\") {\n      if (isOnlineKeyregTxn) {\n        if (voteKey && selectionKey && stateProofKey && voteFirst && voteLast &&\n          voteKeyDilution) {\n          setDisablingState(false);\n        } else {\n          setDisablingState(true);\n        }\n      } else {\n        setDisablingState(false);\n      }\n    }\n  }, [isOnlineKeyregTxn, voteKey, selectionKey, stateProofKey, voteFirst, voteLast, voteKeyDilution, type]);\n\n  return (\n    <Button\n      onClick={handleCreateTransaction}\n      shouldDisplaySpinner={isPending}\n      isDisabled={isDisabled}\n      customClassName={\n        \"create-txn__cta\"\n      }>{`Create ${type} Transaction`}</Button>\n  );\n\n  async function handleCreateTransaction() {\n    try {\n      if (type === \"pay\") {\n        await createPayTransaction();\n      } else if (type === \"axfer\") {\n        await createAxferTransaction();\n      } else if (type === \"keyreg\") {\n        await createKeyregTransaction();\n      } else if (type === \"acfg\") {\n        await createAcfgTransaction();\n      }\n\n      onResetForm();\n    } catch {\n      console.log(\"Failed to create transactions.\");\n    }\n  }\n\n  async function createAcfgTransaction() {\n    try {\n      const suggestedParams = await apiGetTxnParams(chain);\n      let txn: Transaction;\n\n      if (assetTxnType === \"create\") {\n        txn = algosdk.makeAssetCreateTxnWithSuggestedParamsFromObject({\n          defaultFrozen: defaultFrozen || false,\n          unitName,\n          assetName,\n          manager,\n          reserve,\n          freeze,\n          clawback,\n          assetURL,\n          total: total || 1,\n          decimals: decimals || 0,\n          from: address,\n          suggestedParams\n        });\n      } else if (assetTxnType === \"modify\") {\n        txn = algosdk.makeAssetConfigTxnWithSuggestedParamsFromObject({\n          from: address,\n          manager,\n          freeze,\n          clawback,\n          reserve,\n          assetIndex: Number(assetIndex),\n          suggestedParams,\n          strictEmptyAddressChecking: false\n        })\n      } else {\n        txn = algosdk.makeAssetDestroyTxnWithSuggestedParamsFromObject({\n          from: address,\n          suggestedParams,\n          assetIndex: Number(assetIndex)\n        })\n      }\n      \n\n      onSetTransactions([{txn}]);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async function createKeyregTransaction() {\n    try {\n      const suggestedParams = await apiGetTxnParams(chain);\n      let txn: Transaction;\n\n      if (isOnlineKeyregTxn) {\n        txn = algosdk.makeKeyRegistrationTxnWithSuggestedParamsFromObject({\n          from: address,\n          voteKey: voteKey!,\n          selectionKey: selectionKey!,\n          stateProofKey: stateProofKey!,\n          voteFirst: suggestedParams.firstRound,\n          voteLast: suggestedParams.lastRound,\n          voteKeyDilution: voteKeyDilution!,\n          rekeyTo: isValidAddress(rekeyTo) ? rekeyTo : undefined,\n          suggestedParams\n        });\n      } else {\n        txn = algosdk.makeKeyRegistrationTxnWithSuggestedParamsFromObject({\n          from: address,\n          rekeyTo: isValidAddress(rekeyTo) ? rekeyTo : undefined,\n          suggestedParams\n        });\n      }\n\n      onSetTransactions([{txn}]);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function createPayTransaction() {\n    try {\n      setPendingState(true);\n      const suggestedParams = await apiGetTxnParams(chain);\n\n      const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: address,\n        to: toAddress,\n        amount: Number(amount),\n        note: new Uint8Array(Buffer.from(note)),\n        rekeyTo: isValidAddress(rekeyTo) ? rekeyTo : undefined,\n        closeRemainderTo: isValidAddress(closeTo) ? closeTo : undefined,\n        suggestedParams\n      });\n\n      onSetTransactions([{txn}]);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setPendingState(false);\n    }\n  }\n\n  async function createAxferTransaction() {\n    try {\n      setPendingState(true);\n      await fetchAssets();\n\n      const suggestedParams = await apiGetTxnParams(chain);\n      const txns: SignerTransaction[] = [];\n\n      for (let i = 0; i < transactionAmount; i++) {\n        const assetId = assetsRef.current!.results[i].asset_id;\n\n        const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: toAddress,\n          amount: 0,\n          assetIndex: transactionAmount === 1 ? Number(assetIndex) : assetId,\n          note: new Uint8Array(Buffer.from(`Transaction no: ${i + 1}`)),\n          rekeyTo: isValidAddress(rekeyTo) ? rekeyTo : undefined,\n          closeRemainderTo: isValidAddress(closeTo) ? closeTo : undefined,\n          suggestedParams\n        });\n\n        txns.push({txn});\n      }\n\n      onSetTransactions(txns);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setPendingState(false);\n    }\n  }\n\n  async function fetchAssets(next?: string) {\n    let assetsResponse: ListRequestResponse<Asset>;\n\n    if (next) {\n      const nextRequestUrl = new URL(next);\n\n      assetsResponse = await runAsyncProcess(\n        peraApi.getAssets(getSearchParams(nextRequestUrl.search))\n      );\n    } else {\n      assetsResponse = await runAsyncProcess(peraApi.getAssets());\n    }\n\n    assetsRef.current = {\n      ...assetsResponse,\n      results: [...(assetsRef.current?.results || []), ...assetsResponse.results]\n    }\n\n    if ((assetsRef.current.results.length || 0) < transactionAmount && assetsResponse.next) await fetchAssets(assetsResponse.next)\n  }\n}\n\nexport default CreateTxnButton;\n","import {useCallback, useState} from \"react\";\n\nfunction useModalVisibilityState() {\n  const [isModalOpen, setModalVisibility] = useState(false);\n\n  return {\n    isModalOpen,\n    setModalVisibility,\n    openModal: useCallback(() => {\n      setModalVisibility(true);\n    }, [setModalVisibility]),\n    closeModal: useCallback(() => {\n      setModalVisibility(false);\n    }, [setModalVisibility])\n  };\n}\n\nexport default useModalVisibilityState;\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgClose(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20 4L4 20M20 20L4 4\",\n    stroke: \"#0A0A0A\",\n    strokeWidth: 1.5\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgClose);\nexport default __webpack_public_path__ + \"static/media/close.950baffa.svg\";\nexport { ForwardRef as ReactComponent };","import \"./_modal.scss\";\n\nimport React, {useEffect} from \"react\";\nimport ReactModal from \"react-modal\";\nimport classNames from \"classnames\";\n\ntype ModalProps = Omit<\n  ReactModal.Props,\n  \"contentLabel\" | \"onRequestClose\" | \"parentSelector\" | \"className\"\n> & {\n  contentLabel: string;\n  onClose: ReactModal.Props[\"onRequestClose\"];\n  customClassName?: string;\n  shouldPreventScrollOnOverlay?: boolean;\n  children?: React.ReactNode;\n};\n\nconst MODAL_CLOSE_TIMEOUT =\n  parseFloat(\n    getComputedStyle(document.documentElement)\n      .getPropertyValue(\"--modal-transition-duration\")\n      .trim() || \"0.2\"\n\n    // eslint-disable-next-line no-magic-numbers\n  ) * 2000;\n\nReactModal.defaultStyles = {};\nReactModal.setAppElement(\"#root\");\n\nfunction getParent() {\n  return document.querySelector(\"#modal-root\") as HTMLElement;\n}\n\nfunction Modal({\n  customClassName,\n  children,\n  closeTimeoutMS = MODAL_CLOSE_TIMEOUT,\n  shouldCloseOnOverlayClick = true,\n  shouldCloseOnEsc = false,\n  bodyOpenClassName,\n  onClose,\n  shouldPreventScrollOnOverlay = true,\n  isOpen,\n  ...otherProps\n}: ModalProps) {\n  useEffect(() => {\n    if (shouldPreventScrollOnOverlay && isOpen) {\n      document.body.style.overflow = \"hidden\";\n    }\n\n    return () => {\n      if (shouldPreventScrollOnOverlay) {\n        document.body.style.overflow = \"unset\";\n      }\n    };\n  }, [isOpen, shouldPreventScrollOnOverlay]);\n\n  return (\n    // This wrapper div and click handler is added to stop any click events from bubbling outside of the modal\n    // eslint-disable-next-line\n    <div style={{position: \"absolute\"}} onClick={(event) => event.stopPropagation()}>\n      <ReactModal\n        parentSelector={getParent}\n        isOpen={isOpen}\n        className={classNames(\"modal\", customClassName)}\n        onRequestClose={handleRequestClose}\n        closeTimeoutMS={closeTimeoutMS}\n        bodyOpenClassName={classNames(\"ReactModal__Body--open\", bodyOpenClassName)}\n        shouldCloseOnOverlayClick={shouldCloseOnOverlayClick}\n        shouldCloseOnEsc={shouldCloseOnEsc}\n        {...otherProps}>\n        {children}\n      </ReactModal>\n    </div>\n  );\n\n  function handleRequestClose(\n    event: React.MouseEvent<Element, MouseEvent> | React.KeyboardEvent<Element>\n  ) {\n    if (onClose && (shouldCloseOnOverlayClick || shouldCloseOnEsc)) {\n      onClose(event);\n    }\n  }\n}\n\nexport default Modal;\n","export const TRANSACTION_LIMIT = 1000;\nexport const TRANSACTION_IN_GROUP_LIMIT = 16;\n\nexport const ALGORAND_DEFAULT_TXN_WAIT_ROUNDS = 1000;","/* eslint-disable max-lines */\nimport {ReactComponent as CloseIcon} from \"../../../ui/icon/close.svg\";\n\nimport \"./_create-txn.scss\";\n\nimport {SignerTransaction} from \"@perawallet/connect/dist/util/model/peraWalletModels\";\nimport algosdk from \"algosdk\";\nimport {\n  Button,\n  Dropdown,\n  DropdownOption,\n  FormField,\n  Input,\n  List,\n  ListItem,\n  Switch,\n  Tab,\n  TabItem,\n  Textarea\n} from \"@hipo/react-ui-toolkit\";\nimport {useState} from \"react\";\nimport {PeraWalletConnect} from \"@perawallet/connect\";\n\nimport Modal from \"../../../component/modal/Modal\";\nimport {ChainType, clientForChain} from \"../../../utils/algod/algod\";\nimport CreateTxnButton from \"./button/CreateTxnButton\";\nimport {separateIntoChunks} from \"../../../utils/array/arrayUtils\";\nimport {ALGORAND_DEFAULT_TXN_WAIT_ROUNDS, TRANSACTION_IN_GROUP_LIMIT} from \"../../../transaction/transactionConstants\";\nimport {AssetTransactionType, PeraTransactionType} from \"../../../transaction/transactionTypes\";\n\ninterface CreateTxnModalProps {\n  chain: ChainType;\n  address: string;\n  isOpen: boolean;\n  onClose: VoidFunction;\n  peraWallet: PeraWalletConnect;\n}\n\nexport interface TxnForm {\n  address: string;\n  toAddress: string;\n  amount: string;\n  note: string;\n  assetIndex: string;\n  rekeyTo: string;\n  closeTo: string;\n  transactionAmount: number;\n\n  // keyreg\n  voteKey?: string;\n  selectionKey?: string;\n  stateProofKey?: string;\n  voteFirst?: number;\n  voteLast?: number;\n  voteKeyDilution?: number;\n  isOnlineKeyregTxn?: boolean;\n\n  // acfg\n  assetTxnType?: AssetTransactionType;\n  unitName?: string;\n  assetName?: string;\n  defaultFrozen?: boolean;\n  manager?: string;\n  reserve?: string;\n  freeze?: string;\n  clawback?: string;\n  assetURL?: string;\n  total?: number;\n  decimals?: number;\n}\n\nconst TXN_DROPDOWN_OPTIONS: DropdownOption<PeraTransactionType, any>[] = [\n  {\n    id: \"pay\",\n    title: \"pay\"\n  },\n  {\n    id: \"axfer\",\n    title: \"axfer\"\n  },\n  {\n    id: \"keyreg\",\n    title: \"keyreg\"\n  },\n  {\n    id: \"acfg\",\n    title: \"acfg\"\n  }\n];\n\nconst ASSET_TXN_TABS: TabItem[] = [\n  {id: \"create\", content: \"Create\"},\n  {id: \"modify\", content: \"Modify\"},\n  {id: \"destroy\", content: \"Destroy\"}\n]\n\nfunction CreateTxn({chain, address, isOpen, onClose, peraWallet}: CreateTxnModalProps) {\n  const [transactions, setTransactions] = useState<SignerTransaction[]>([]);\n  const [transactionDropdownOption, setTransactionDropdownOption] =\n    useState<DropdownOption<PeraTransactionType> | null>({\n      id: \"pay\",\n      title: \"pay\"\n    });\n  const [formState, setFormState] = useState<TxnForm>({\n    address,\n    toAddress: \"\",\n    amount: \"\",\n    note: \"\",\n    assetIndex: \"\",\n    rekeyTo: \"\",\n    closeTo: \"\",\n    transactionAmount: 1,\n    assetTxnType: \"create\"\n  });\n  const [sendBlockchain, setSendBlockchain] = useState(false);\n\n  return (\n    <Modal\n      customClassName={\"create-txn\"}\n      contentLabel={\"Create Txn Modal\"}\n      isOpen={isOpen}\n      onClose={onClose}>\n      <CloseIcon onClick={onClose} className={\"modal__close\"} width={24} height={24} />\n\n      <h3 style={{marginBottom: \"10px\"}}>{\"Create Transaction\"}</h3>\n\n      <FormField label={\"Transaction Type\"}>\n        <Dropdown\n          customClassName={\"app__header__chain-select-dropdown\"}\n          role={\"menu\"}\n          options={TXN_DROPDOWN_OPTIONS}\n          selectedOption={transactionDropdownOption}\n          onSelect={(option) => {\n            setTransactionDropdownOption(option);\n          }}\n          hasDeselectOption={false}\n        />\n      </FormField>\n\n      <FormField label={\"From Address\"}>\n        <Input\n          value={address}\n          name={\"from\"}\n          isDisabled={true}\n          onChange={() => console.log(\"a\")}\n        />\n      </FormField>\n\n      {renderForm()}\n\n      <FormField label={\"Send Blockchain\"}>\n        <Switch onToggle={handleSendBlockchain} isToggledOn={sendBlockchain} />\n      </FormField>\n\n      {transactions.length > 0 && (\n        <List items={transactions}>\n          {(item, _a, index) => (\n            <ListItem>{`Txn ${(index || 0) + 1} type: ${item.txn.type}`}</ListItem>\n          )}\n        </List>\n      )}\n\n      <CreateTxnButton\n        txnForm={formState}\n        type={transactionDropdownOption!.id}\n        chain={chain}\n        onResetForm={resetForm}\n        onSetTransactions={handleSetTransactions}\n      />\n\n      <Button\n        onClick={handleGroupTxn}\n        customClassName={\n          \"create-txn__cta\"\n        }>{`Create Group Txn with created transactions`}</Button>\n\n      <Button\n        onClick={signTxn}\n        customClassName={\n          \"create-txn__cta\"\n        }>{`Sign ${transactions.length} Transactions`}</Button>\n    </Modal>\n  );\n\n  function renderForm() {\n    switch (transactionDropdownOption?.id) {\n      case \"pay\":\n        return (\n          <>\n            <FormField label={\"To Address\"}>\n              <Input\n                value={formState.toAddress}\n                name={\"to\"}\n                onChange={(e) =>\n                  setFormState({...formState, toAddress: e.currentTarget.value})\n                }\n              />\n            </FormField>\n\n            <FormField label={\"Amount (on microAlgos)\"}>\n              <Input\n                value={formState.amount}\n                name={\"amount\"}\n                onChange={(e) =>\n                  setFormState({...formState, amount: e.currentTarget.value})\n                }\n              />\n            </FormField>\n\n            <FormField label={\"Rekey To\"}>\n              <Input\n                value={formState.rekeyTo}\n                name={\"rekeyto\"}\n                onChange={(e) =>\n                  setFormState({...formState, rekeyTo: e.currentTarget.value})\n                }\n              />\n            </FormField>\n\n            <FormField label={\"Close To\"}>\n              <Input\n                value={formState.closeTo}\n                name={\"closeTo\"}\n                onChange={(e) =>\n                  setFormState({...formState, closeTo: e.currentTarget.value})\n                }\n              />\n            </FormField>\n\n            <FormField label={\"Note\"}>\n              <Textarea\n                value={formState.note}\n                name={\"note\"}\n                onChange={(e) =>\n                  setFormState({...formState, note: e.currentTarget.value})\n                }\n              />\n            </FormField>\n          </>\n        );\n\n      case \"axfer\":\n        return (\n          <>\n            <FormField label={\"To Address\"}>\n              <Input\n                value={formState.toAddress}\n                name={\"to\"}\n                onChange={(e) =>\n                  setFormState({...formState, toAddress: e.currentTarget.value})\n                }\n              />\n            </FormField>\n\n            <FormField label={\"Asset Index\"}>\n              <Input\n                value={formState.assetIndex}\n                name={\"assetIndex\"}\n                onChange={(e) =>\n                  setFormState({...formState, assetIndex: e.currentTarget.value})\n                }\n              />\n            </FormField>\n\n            <FormField label={\"Amount (on microAlgos)\"}>\n              <Input\n                value={formState.amount}\n                name={\"amount\"}\n                onChange={(e) =>\n                  setFormState({...formState, amount: e.currentTarget.value})\n                }\n              />\n            </FormField>\n\n            <FormField label={\"Rekey To\"}>\n              <Input\n                value={formState.rekeyTo}\n                name={\"rekeyto\"}\n                onChange={(e) =>\n                  setFormState({...formState, rekeyTo: e.currentTarget.value})\n                }\n              />\n            </FormField>\n\n            <FormField label={\"Close To\"}>\n              <Input\n                value={formState.closeTo}\n                name={\"closeTo\"}\n                onChange={(e) =>\n                  setFormState({...formState, closeTo: e.currentTarget.value})\n                }\n              />\n            </FormField>\n\n            <FormField label={\"Note\"}>\n              <Textarea\n                value={formState.note}\n                name={\"note\"}\n                onChange={(e) =>\n                  setFormState({...formState, note: e.currentTarget.value})\n                }\n              />\n            </FormField>\n\n            <FormField label={\"Transaction Amount (optional)\"}>\n              <Input\n                value={formState.transactionAmount}\n                name={\"transactionAmount\"}\n                type={\"number\"}\n                onChange={(e) =>\n                  setFormState({...formState, transactionAmount: Number(e.currentTarget.value)})\n                }\n              />\n            </FormField>\n          </>\n        );\n\n      case \"keyreg\":\n        return (\n          <>\n            <FormField label={`${formState.isOnlineKeyregTxn ? \"Online\" : \"Offline\"} Keyreg Transaction`}>\n              <Switch isToggledOn={formState.isOnlineKeyregTxn || false} onToggle={() => setFormState({...formState, isOnlineKeyregTxn: !formState.isOnlineKeyregTxn})} />\n            </FormField>\n\n            <FormField label={\"Rekey To (optional)\"}>\n              <Input\n                value={formState.rekeyTo}\n                name={\"rekeyto\"}\n                onChange={(e) =>\n                  setFormState({...formState, rekeyTo: e.currentTarget.value})\n                }\n              />\n            </FormField>\n\n            {formState.isOnlineKeyregTxn && (\n              <>\n                <FormField label={\"Vote Key\"}>\n                  <Input\n                    value={formState.voteKey}\n                    name={\"voteKey\"}\n                    onChange={(e) =>\n                      setFormState({...formState, voteKey: e.currentTarget.value})\n                    }\n                  />\n                </FormField>\n\n                <FormField label={\"Selection Key\"}>\n                  <Input\n                    value={formState.selectionKey}\n                    name={\"selectionKey\"}\n                    onChange={(e) =>\n                      setFormState({...formState, selectionKey: e.currentTarget.value})\n                    }\n                  />\n                </FormField>\n\n                <FormField label={\"State Proof Key\"}>\n                  <Input\n                    value={formState.stateProofKey}\n                    name={\"stateProofKey\"}\n                    onChange={(e) =>\n                      setFormState({...formState, stateProofKey: e.currentTarget.value})\n                    }\n                  />\n                </FormField>\n\n                <FormField label={\"Vote First\"}>\n                  <Input\n                    value={formState.voteFirst}\n                    name={\"voteFirst\"}\n                    type={\"number\"}\n                    onChange={(e) =>\n                      setFormState({...formState, voteFirst: Number(e.currentTarget.value)})\n                    }\n                  />\n                </FormField>\n\n                <FormField label={\"Vote Last\"}>\n                  <Input\n                    value={formState.voteLast}\n                    name={\"voteLast\"}\n                    type={\"number\"}\n                    onChange={(e) =>\n                      setFormState({...formState, voteLast: Number(e.currentTarget.value)})\n                    }\n                  />\n                </FormField>\n\n                <FormField label={\"Vote Key Dilution\"}>\n                  <Input\n                    value={formState.voteKeyDilution}\n                    name={\"voteKeyDilution\"}\n                    type={\"number\"}\n                    onChange={(e) =>\n                      setFormState({...formState, voteKeyDilution: Number(e.currentTarget.value)})\n                    }\n                  />\n                </FormField>\n              </>\n            )}\n          </>\n        );\n\n      case \"acfg\":\n        return (\n          <>\n            <Tab items={ASSET_TXN_TABS} initialActiveTabIndex={0} customClassName={\"create-txn__asset-tab\"} onTabChange={handleAssetTabChange}>\n              {getAssetTransactionForms()}\n            </Tab>\n          </>\n        )\n\n      default:\n        return null;\n    }\n  }\n\n  function handleAssetTabChange(index: number) {\n    let txnType: AssetTransactionType = \"create\";\n\n    if (index === 0) txnType = \"create\";\n    else if (index === 1) txnType = \"modify\";\n    else txnType = \"destroy\";\n\n    setFormState({...formState, assetTxnType: txnType})\n  }\n\n  function getAssetTransactionForms() {\n    const create = (\n      <>\n        <FormField label={\"Unit Name\"}>\n          <Input\n            value={formState.unitName}\n            name={\"unit\"}\n            onChange={(e) =>\n              setFormState({...formState, unitName: e.currentTarget.value})\n            }\n          />\n        </FormField>\n\n        <FormField label={\"Asset Name\"}>\n          <Input\n            value={formState.assetName}\n            name={\"asset-name\"}\n            onChange={(e) =>\n              setFormState({...formState, assetName: e.currentTarget.value})\n            }\n          />\n        </FormField>\n\n        <FormField label={\"Manager\"}>\n          <Input\n            value={formState.manager}\n            name={\"manager\"}\n            onChange={(e) =>\n              setFormState({...formState, manager: e.currentTarget.value})\n            }\n          />\n        </FormField>\n\n\n        <FormField label={\"Reserve\"}>\n          <Input\n            value={formState.reserve}\n            name={\"reserve\"}\n            onChange={(e) =>\n              setFormState({...formState, reserve: e.currentTarget.value})\n            }\n          />\n        </FormField>\n\n\n        <FormField label={\"Freeze\"}>\n          <Input\n            value={formState.freeze}\n            name={\"freeze\"}\n            onChange={(e) =>\n              setFormState({...formState, freeze: e.currentTarget.value})\n            }\n          />\n        </FormField>\n\n\n        <FormField label={\"Clawback\"}>\n          <Input\n            value={formState.clawback}\n            name={\"clawback\"}\n            onChange={(e) =>\n              setFormState({...formState, clawback: e.currentTarget.value})\n            }\n          />\n        </FormField>\n\n\n        <FormField label={\"Asset URL\"}>\n          <Input\n            value={formState.assetURL}\n            name={\"asset-url\"}\n            onChange={(e) =>\n              setFormState({...formState, assetURL: e.currentTarget.value})\n            }\n          />\n        </FormField>\n\n\n        <FormField label={\"Total\"}>\n          <Input\n            value={formState.total}\n            type={\"number\"}\n            name={\"total\"}\n            onChange={(e) =>\n              setFormState({...formState, total: Number(e.currentTarget.value)})\n            }\n          />\n        </FormField>\n\n\n        <FormField label={\"Decimal\"}>\n          <Input\n            value={formState.decimals}\n            type={\"number\"}\n            name={\"decimals\"}\n            onChange={(e) =>\n              setFormState({...formState, decimals: Number(e.currentTarget.value)})\n            }\n          />\n        </FormField>\n\n        <FormField label={\"Default Frozen\"}>\n          <Switch isToggledOn={formState.defaultFrozen || false} onToggle={() => setFormState({...formState, defaultFrozen: !formState.defaultFrozen})} />\n        </FormField>\n      </>\n    );\n\n    const modify = (\n      <>\n        <FormField label={\"Asset Index\"}>\n          <Input\n            value={formState.assetIndex}\n            name={\"asset-index\"}\n            type={\"number\"}\n            onChange={(e) =>\n              setFormState({...formState, assetIndex: e.currentTarget.value})\n            }\n          />\n        </FormField>\n\n        <FormField label={\"Manager\"}>\n          <Input\n            value={formState.manager}\n            name={\"manager\"}\n            onChange={(e) =>\n              setFormState({...formState, manager: e.currentTarget.value})\n            }\n          />\n        </FormField>\n\n\n        <FormField label={\"Reserve\"}>\n          <Input\n            value={formState.reserve}\n            name={\"reserve\"}\n            onChange={(e) =>\n              setFormState({...formState, reserve: e.currentTarget.value})\n            }\n          />\n        </FormField>\n\n\n        <FormField label={\"Freeze\"}>\n          <Input\n            value={formState.freeze}\n            name={\"freeze\"}\n            onChange={(e) =>\n              setFormState({...formState, freeze: e.currentTarget.value})\n            }\n          />\n        </FormField>\n\n\n        <FormField label={\"Clawback\"}>\n          <Input\n            value={formState.clawback}\n            name={\"clawback\"}\n            onChange={(e) =>\n              setFormState({...formState, clawback: e.currentTarget.value})\n            }\n          />\n        </FormField>\n      </>\n    );\n\n    const destroy = (\n      <>\n        <FormField label={\"Asset Index\"}>\n          <Input\n            value={formState.assetIndex}\n            name={\"asset-index\"}\n            type={\"number\"}\n            onChange={(e) =>\n              setFormState({...formState, assetIndex: e.currentTarget.value})\n            }\n          />\n        </FormField>\n      </>\n    );\n\n    return [create, modify, destroy];\n  }\n\n  function handleSetTransactions(newTxns: SignerTransaction[]) {\n    setTransactions([...transactions, ...newTxns]);\n  }\n\n  function handleGroupTxn() {\n    try {\n      const transactionChunks = separateIntoChunks(transactions, TRANSACTION_IN_GROUP_LIMIT);\n\n      for (const transactionChunk of transactionChunks) {\n        algosdk.assignGroupID(transactionChunk.map((toSign) => toSign.txn));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function signTxn() {\n    try {\n      if (transactions.length === 0) {\n        return;\n      }\n\n      const signedTransactions = await peraWallet.signTransaction([transactions]);\n\n      console.log({signedTransactions});\n\n      if (sendBlockchain) {\n        for (const signedTransaction of signedTransactions) {\n          await clientForChain(chain).sendRawTransaction(signedTransaction).do();\n  \n          await algosdk.waitForConfirmation(\n            clientForChain(chain),\n            transactions[0].txn.txID(),\n            ALGORAND_DEFAULT_TXN_WAIT_ROUNDS\n          );\n        }\n\n        console.log(\"Transactions sent to blockchain\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  function handleSendBlockchain() {\n    setSendBlockchain(!sendBlockchain);\n  }\n\n  function resetForm() {\n    setFormState({\n      ...formState,\n      toAddress: \"\",\n      amount: \"\",\n      note: \"\",\n      assetIndex: \"\",\n      rekeyTo: \"\",\n      closeTo: \"\",\n      transactionAmount: 1\n    });\n  }\n}\n\nexport default CreateTxn;\n","function separateIntoChunks<T = any>(array: T[], chunkSize: number): T[][] {\n  const separatedArray = [];\n  const arrayAmount = array.length / chunkSize;\n\n  for (let i = 0; i < arrayAmount; i++) {\n    separatedArray.push(array.slice(i * chunkSize, (i + 1) * chunkSize));\n  }\n\n  return separatedArray;\n}\n\nexport {separateIntoChunks};","import {omitKeys} from \"../object/objectUtils\";\n\nexport type AlgorandNumberFormatterOptions = Omit<Intl.NumberFormatOptions, \"style\"> & {\n  style?: Intl.NumberFormatPartTypes | \"percent\" | \"shorten-large-numbers\";\n  locale?: string;\n};\n\n/**\n * A higher-order function that uses Intl.NumberFormat behind the scenes to format a number\n * @param {Object} providedOptions -\n * @param {string} providedOptions.locale - Passed as first argument to the Intl.NumberFormat. Defaults to one of [navigator.language, \"en-GB\"] or respects provided locale from the call-site\n * @returns {function} Function\n */\n\nexport const DEFAULT_NUMBER_FORMAT_LOCALE_PREFERENCE = \"en-US\";\n\nfunction formatNumber(providedOptions: AlgorandNumberFormatterOptions = {}) {\n  const {locale = DEFAULT_NUMBER_FORMAT_LOCALE_PREFERENCE, ...otherOptions} =\n    providedOptions;\n  let options = otherOptions;\n  const isCurrencyFormatting = options.style === \"currency\";\n  const shouldShortenLargeNumbers = options.style === \"shorten-large-numbers\";\n\n  if (isCurrencyFormatting) {\n    options = {\n      currency: \"USD\",\n      maximumFractionDigits: 5,\n      minimumFractionDigits: 2,\n      // \"narrowSymbol\" prevents showing explicit currency symbols, such as \"US$\" or \"CA$\"\n      currencyDisplay: \"narrowSymbol\",\n      ...otherOptions\n    };\n  } else if (shouldShortenLargeNumbers) {\n    options = {\n      maximumFractionDigits: 2,\n      minimumFractionDigits: 0,\n      style: \"decimal\",\n      ...omitKeys(otherOptions, \"style\")\n    };\n  } else {\n    options = {\n      maximumFractionDigits: 5,\n      minimumFractionDigits: 2,\n      style: \"decimal\",\n      ...otherOptions\n    };\n  }\n\n  let numberFormatter: {\n    format: (x: number | bigint) => string;\n  };\n\n  try {\n    numberFormatter = new Intl.NumberFormat(\n      locale || [navigator.language, \"en-GB\"],\n      options\n    );\n  } catch (error) {\n    numberFormatter = {\n      format(x: number | bigint) {\n        return x.toLocaleString();\n      }\n    };\n\n    if (isCurrencyFormatting) {\n      // currencyDisplay: \"narrowSymbol\" option is not supported by some browsers, try by providing \"symbol\"\n      try {\n        options.currencyDisplay = \"symbol\";\n        numberFormatter = new Intl.NumberFormat(\n          locale || [navigator.language, \"en-GB\"],\n          options\n        );\n      } catch (currencyFormattingError) {\n        console.error({currencyFormattingError});\n      }\n    }\n  }\n\n  return (value: number) => {\n    let formattedValue = \"\";\n\n    if (!Object.is(value, NaN)) {\n      /* eslint-disable no-magic-numbers */\n      if (shouldShortenLargeNumbers) {\n        if (value >= Math.pow(10, 9)) {\n          formattedValue = `${numberFormatter.format(value / Math.pow(10, 9))}b`;\n        } else if (value >= Math.pow(10, 6)) {\n          formattedValue = `${numberFormatter.format(value / Math.pow(10, 6))}m`;\n        } else if (value >= Math.pow(10, 3)) {\n          formattedValue = `${numberFormatter.format(value / Math.pow(10, 3))}k`;\n        } else {\n          formattedValue = numberFormatter.format(value);\n        }\n      } else {\n        formattedValue = numberFormatter.format(value);\n      }\n      /* eslint-enable no-magic-numbers */\n    }\n\n    if (formattedValue && options.currency === \"USD\") {\n      // in case `narrowSymbol` option was failed, make sure \"US$\" sign appears as just \"$\"\n      formattedValue = formattedValue.replace(\"US$\", \"$\");\n    }\n\n    return formattedValue;\n  };\n}\n\nexport {formatNumber};\n","import {microalgosToAlgos} from \"algosdk\";\n\nimport {ChainType, clientForChain} from \"../algod/algod\";\nimport {formatNumber} from \"../number/numberUtils\";\n\nfunction getAccountBalanceText(account: AccountInformationData) {\n  return `${formatNumber({minimumFractionDigits: 2})(\n    microalgosToAlgos(Number(account.amount))\n  )} ALGO`;\n}\n\nfunction getAccountInformation(chain: ChainType, address: string) {\n  return new Promise<AccountInformationData>((resolve, reject) => {\n    try {\n      resolve(\n        clientForChain(chain)\n          .accountInformation(address)\n          .do() as Promise<AccountInformationData>\n      );\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nexport {getAccountBalanceText, getAccountInformation};\n","export type PeraWalletType = \"pera-wallet\" | \"pera-wallet-web\";\n\nexport interface PeraWalletDetails {\n  type: PeraWalletType;\n  accounts: string[];\n  selectedAccount: string;\n}\n\nconst PERA_WALLET_LOCAL_STORAGE_KEYS = {\n  WALLET: \"PeraWallet.Wallet\",\n  COMPACT_MODE: \"CompactMode\"\n};\n\nexport {PERA_WALLET_LOCAL_STORAGE_KEYS};\n","import {\n  PERA_WALLET_LOCAL_STORAGE_KEYS,\n  PeraWalletDetails\n} from \"./pera-wallet/peraWalletTypes\";\n\nfunction getLocalStorage() {\n  return typeof localStorage === \"undefined\" ? undefined : localStorage;\n}\n\nfunction getWalletDetailsFromStorage(): PeraWalletDetails | null {\n  const storedWalletDetails = getLocalStorage()?.getItem(\n    PERA_WALLET_LOCAL_STORAGE_KEYS.WALLET\n  );\n\n  if (storedWalletDetails) {\n    return JSON.parse(storedWalletDetails) as PeraWalletDetails;\n  }\n\n  return null;\n}\n\nexport {getWalletDetailsFromStorage};\n","import {getAccountBalanceText} from \"../../utils/account/accountUtils\";\nimport {ChainType} from \"../../utils/algod/algod\";\nimport {getWalletDetailsFromStorage} from \"../../utils/storage/storageUtils\";\nimport {truncateAccountAddress} from \"../../utils/string/stringUtils\";\n\nfunction AccountBalance({\n  accountInformation,\n  chain\n}: {\n  accountInformation: AccountInformationData;\n  chain: ChainType;\n}) {\n  const walletDetails = getWalletDetailsFromStorage();\n\n  return (\n    <div>\n      <div className={\"app__account-address\"}>\n        <b className={\"app__text-purple\"}>{\"Connected to: \"}</b>\n\n        {truncateAccountAddress(accountInformation.address)}\n      </div>\n\n      <div className={\"app__account-address\"}>\n        <b className={\"app__text-purple\"}>{\"Chain: \"}</b>\n\n        {chain.toUpperCase()}\n      </div>\n\n      <div className={\"app__account-address\"}>\n        <b className={\"app__text-purple\"}>{\"Wallet Type: \"}</b>\n\n        {walletDetails?.type}\n      </div>\n\n      {accountInformation && (\n        <div className={\"app__account-address\"}>\n          <b className={\"app__text-purple\"}>{\"Balance: \"}</b>\n\n          {getAccountBalanceText(accountInformation)}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default AccountBalance;\n","function truncateAccountAddress(stringToTruncate: string) {\n  /* eslint-disable no-magic-numbers */\n  return `${stringToTruncate.substring(0, 8)}...${stringToTruncate.substring(\n    stringToTruncate.length - 4\n  )}`;\n  /* eslint-enable no-magic-numbers */\n}\n\nexport {truncateAccountAddress};\n","import \"./_pera-toast.scss\";\n\nimport React from \"react\";\nimport classNames from \"classnames\";\n\ninterface PeraToastProps {\n  message: React.ReactNode;\n  customClassName?: string;\n}\n\nfunction PeraToast({message, customClassName}: PeraToastProps) {\n  return (\n    <div className={classNames(\"pera-toast\", customClassName)}>\n      <div>{message}</div>\n    </div>\n  );\n}\n\nexport default PeraToast;\n","import {useToaster} from \"@hipo/react-ui-toolkit\";\nimport {useCallback, useEffect} from \"react\";\n\nimport PeraToast from \"../../component/toast/PeraToast\";\nimport {getAccountInformation} from \"../../utils/account/accountUtils\";\nimport {ChainType} from \"../../utils/algod/algod\";\nimport useAsyncProcess from \"../useAsyncProcess/useAsyncProcess\";\n\nfunction useGetAccountDetailRequest({\n  chain,\n  accountAddress\n}: {\n  chain: ChainType;\n  accountAddress: string;\n}) {\n  const {\n    state: accountInformationState,\n    runAsyncProcess: runGetAccountInformationAsyncProcess\n  } = useAsyncProcess<AccountInformationData>();\n  const {display: displayToast} = useToaster();\n\n  const refetchAccountDetail = useCallback(() => {\n    if (chain && accountAddress) {\n      try {\n        runGetAccountInformationAsyncProcess(\n          getAccountInformation(chain, accountAddress)\n        );\n      } catch (error) {\n        displayToast({\n          render() {\n            return <PeraToast message={error as unknown as string} />;\n          }\n        });\n      }\n    }\n  }, [accountAddress, chain, displayToast, runGetAccountInformationAsyncProcess]);\n\n  useEffect(() => {\n    refetchAccountDetail();\n  }, [refetchAccountDetail]);\n\n  return {\n    accountInformationState,\n    refetchAccountDetail\n  };\n}\n\nexport default useGetAccountDetailRequest;\n","import \"./_home.scss\";\n\nimport {Button, Dropdown, DropdownOption, Switch, useToaster} from \"@hipo/react-ui-toolkit\";\nimport {useEffect, useState} from \"react\";\nimport {PeraWalletConnect} from \"@perawallet/connect\";\nimport {PeraOnramp} from \"@perawallet/onramp\";\nimport {SignerTransaction} from \"@perawallet/connect/dist/util/model/peraWalletModels\";\n\nimport AccountBalance from \"./account-balance/AccountBalance\";\nimport SignTxn from \"./sign-txn/SignTxn\";\nimport PeraToast from \"../component/toast/PeraToast\";\nimport {ChainType, clientForChain} from \"../utils/algod/algod\";\nimport useGetAccountDetailRequest from \"../hooks/useGetAccountDetailRequest/useGetAccountDetailRequest\";\nimport {createAssetOptInTxn} from \"./sign-txn/util/signTxnUtils\";\nimport peraApiManager from \"../utils/pera/api/peraApiManager\";\nimport {PERA_WALLET_LOCAL_STORAGE_KEYS} from \"../utils/storage/pera-wallet/peraWalletTypes\";\n\nconst isCompactMode = localStorage.getItem(PERA_WALLET_LOCAL_STORAGE_KEYS.COMPACT_MODE);\nlet peraWallet = new PeraWalletConnect({compactMode: isCompactMode === \"true\"});\nconst peraOnRamp = new PeraOnramp({\n  optInEnabled: true\n});\n\nfunction Home() {\n  const [chainType, setChainType] = useState<ChainType>(ChainType.TestNet);\n  const [chainDropdownSelectedOption, setChainDropdownSelectedOption] =\n    useState<DropdownOption<\"mainnet\" | \"testnet\", any> | null>({\n      id: \"testnet\",\n      title: \"TestNet\"\n    });\n  const [accountAddress, setAccountAddress] = useState<string | null>(null);\n  const isConnectedToPeraWallet = !!accountAddress;\n  const {display: displayToast} = useToaster();\n  const {accountInformationState, refetchAccountDetail} = useGetAccountDetailRequest({\n    chain: chainType,\n    accountAddress: accountAddress || \"\"\n  });\n  const [isConnectCompactMode, setConnectCompactMode] = useState(peraWallet.compactMode || false);\n\n  useEffect(() => {\n    peraWallet = new PeraWalletConnect({compactMode: isConnectCompactMode});\n  }, [isConnectCompactMode]);\n\n  useEffect(() => {\n    peraWallet\n      .reconnectSession()\n      .then((accounts) => {\n        if (accounts) {\n          setAccountAddress(accounts[0]);\n\n          handleSetLog(\"Connected to Pera Wallet\");\n        }\n\n        peraWallet.connector?.on(\"disconnect\", () => {\n          setAccountAddress(null);\n        });\n      })\n      .catch((e) => console.log(e));\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className={`app ${isConnectedToPeraWallet ? \"app--connected\" : \"\"}`}>\n      <div className={\"app__header\"}>\n        <Dropdown\n          customClassName={\"app__header__chain-select-dropdown\"}\n          role={\"menu\"}\n          options={[\n            {\n              id: \"testnet\",\n              title: \"TestNet\"\n            },\n            {\n              id: \"mainnet\",\n              title: \"MainNet\"\n            }\n          ]}\n          selectedOption={chainDropdownSelectedOption}\n          onSelect={(option) => {\n            handleSelectChainType(option);\n          }}\n          hasDeselectOption={false}\n        />\n      </div>\n\n      {chainType === ChainType.MainNet && (\n        <div className={\"app__chain-message\"}>\n          {\n            \"You are using MainNet right now. Please be careful when you trying to send transactions.\"\n          }\n        </div>\n      )}\n\n      <h1 className={\"app__title\"}>\n        {\"Pera Wallet\"} <small>{\"Example dApp\"}</small>\n      </h1>\n\n      {!isConnectedToPeraWallet && (\n        <div className={\"app__compact-mode-switch\"}>\n          <p>{\"Pera Connect Compact Mode: \"}</p>\n\n          <Switch onToggle={handleCompactModeSwitch} isToggledOn={isConnectCompactMode} />\n        </div>\n      )}\n\n      {accountInformationState.data && (\n        <AccountBalance\n          accountInformation={accountInformationState.data}\n          chain={chainType}\n        />\n      )}\n\n      {isConnectedToPeraWallet && chainType === \"mainnet\" && (\n        <Button customClassName={\"app__button--connect\"} onClick={handleAddFunds}>\n          {\"Add funds\"}\n        </Button>\n      )}\n\n      <Button\n        customClassName={\"app__button--connect\"}\n        onClick={\n          isConnectedToPeraWallet ? handleDisconnectWalletClick : handleConnectWalletClick\n        }>\n        {isConnectedToPeraWallet ? \"Disconnect\" : \"Connect to Pera Wallet\"}\n      </Button>\n\n      {isConnectedToPeraWallet && (\n        <SignTxn\n          accountAddress={accountAddress}\n          peraWallet={peraWallet}\n          handleSetLog={handleSetLog}\n          chain={chainType}\n          refecthAccountDetail={refetchAccountDetail}\n        />\n      )}\n    </div>\n  );\n\n  function handleCompactModeSwitch() {\n    setConnectCompactMode(!isConnectCompactMode);\n\n    localStorage.setItem(PERA_WALLET_LOCAL_STORAGE_KEYS.COMPACT_MODE, localStorage.getItem(PERA_WALLET_LOCAL_STORAGE_KEYS.COMPACT_MODE) === \"true\" ? \"false\" : \"true\");\n  }\n\n  function handleAddFunds() {\n    if (accountAddress) {\n      addFunds();\n\n      peraOnRamp.on({\n        OPT_IN_REQUEST: async ({accountAddress: addr, assetID}) => {\n          try {\n            const {transaction: txnsToSign} = await createAssetOptInTxn(\n              chainType,\n              addr,\n              Number(assetID)\n            );\n\n            const transactions: SignerTransaction[] = txnsToSign.reduce(\n              (acc, val) => acc.concat(val),\n              []\n            );\n\n            const signedTxn = await peraWallet.signTransaction([transactions]);\n\n            await clientForChain(chainType).sendRawTransaction(signedTxn).do();\n\n            peraOnRamp.close();\n\n            addFunds();\n          } catch (error) {\n            handleSetLog(`${error}`);\n          }\n        },\n        ADD_FUNDS_COMPLETED: () => {\n          handleSetLog(\"Add funds completed\");\n        },\n        ADD_FUNDS_FAILED: () => {\n          handleSetLog(\"Add funds failed\");\n        }\n      });\n    }\n  }\n\n  function addFunds() {\n    if (accountAddress) {\n      peraOnRamp\n        .addFunds({\n          accountAddress\n        })\n        .then(() => {\n          handleSetLog(\"Funds added\");\n        })\n        .catch((e) => {\n          handleSetLog(`${e}`);\n        });\n    }\n  }\n\n  async function handleConnectWalletClick() {\n    try {\n      const newAccounts = await peraWallet.connect();\n  \n      handleSetLog(\"Connected to Pera Wallet\");\n  \n      setAccountAddress(newAccounts[0]);\n    } catch (e) {\n      console.log(e);\n      handleSetLog(`${e}`);\n    }\n  }\n\n  function handleDisconnectWalletClick() {\n    peraWallet.disconnect();\n\n    setAccountAddress(null);\n  }\n\n  function handleSetLog(log: string) {\n    displayToast({\n      timeout: 10000,\n      render() {\n        return <PeraToast message={log} />;\n      }\n    });\n  }\n\n  function handleSelectChainType(\n    option: DropdownOption<\"mainnet\" | \"testnet\", any> | null\n  ) {\n    if (option?.id === \"testnet\") {\n      setChainType(ChainType.TestNet);\n      setChainDropdownSelectedOption({\n        id: \"testnet\",\n        title: \"TestNet\"\n      });\n      peraApiManager.updateFetcher(ChainType.TestNet);\n    } else if (option?.id === \"mainnet\") {\n      setChainType(ChainType.MainNet);\n      setChainDropdownSelectedOption({\n        id: \"mainnet\",\n        title: \"MainNet\"\n      });\n      peraApiManager.updateFetcher(ChainType.MainNet);\n    }\n  }\n}\n\nexport default Home;\n","import {useEffect, useRef} from \"react\";\n\nconst DEFAULT_DEBOUNCE_TIME = 150;\n\nconst DEFAULT_OPTIONS = {\n  /* Discard emitted resize events that take less than the specified time */\n  debounceTime: DEFAULT_DEBOUNCE_TIME\n};\n\nfunction useOnWindowResize(callback: VoidFunction, options = DEFAULT_OPTIONS) {\n  const timeoutId = useRef<any>(undefined);\n  const callbackRef = useRef(callback);\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      clearTimeout(timeoutId.current);\n    };\n\n    function handleResize() {\n      if (!timeoutId.current) {\n        timeoutId.current = setTimeout(() => {\n          callbackRef.current();\n          timeoutId.current = undefined;\n        }, options.debounceTime);\n      }\n    }\n  }, [options.debounceTime]);\n}\n\nexport default useOnWindowResize;\n","import {useEffect} from \"react\";\n\nimport useOnWindowResize from \"./useOnWindowResize\";\n\n/**\n * Creates a css variable `--vh` that is the calculated viewport height,\n * and updates it on window resize. This `--vh` value can be used instead of\n * default `vh` value to prevent layout issues on mobile devices\n * See: https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\n */\nfunction useSetDynamicVhValue() {\n  useEffect(() => {\n    // This useEffect was added to make sure vh is set on mount (even if there is no window resize)\n    setVhVariable();\n  }, []);\n\n  useOnWindowResize(() => {\n    setVhVariable();\n  });\n\n  function setVhVariable() {\n    // a vh unit is equal to 1% of the screen height\n    // eslint-disable-next-line no-magic-numbers\n    document.documentElement.style.setProperty(\"--vh\", `${window.innerHeight * 0.01}px`);\n  }\n}\n\nexport default useSetDynamicVhValue;\n","import Home from \"../home/Home\";\nimport useSetDynamicVhValue from \"../hooks/useSetDynamicVh\";\n\nfunction App() {\n  useSetDynamicVhValue();\n\n  return <Home />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"@hipo/react-ui-toolkit/dist/main.css\";\nimport \"./_index.scss\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {ToastContextProvider} from \"@hipo/react-ui-toolkit\";\n\nimport App from \"./core/app/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ToastContextProvider>\n      <App />\n    </ToastContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/* eslint-disable */\nimport algosdk, {SuggestedParams} from \"algosdk\";\nimport {apiGetTxnParams, ChainType} from \"../../../utils/algod/algod\";\n\nconst testAccounts = [\n  algosdk.mnemonicToSecretKey(\n    \"cannon scatter chest item way pulp seminar diesel width tooth enforce fire rug mushroom tube sustain glide apple radar chronic ask plastic brown ability badge\"\n  ),\n  algosdk.mnemonicToSecretKey(\n    \"person congress dragon morning road sweet horror famous bomb engine eager silent home slam civil type melt field dry daring wheel monitor custom above term\"\n  ),\n  algosdk.mnemonicToSecretKey(\n    \"faint protect home drink journey humble tube clinic game rough conduct sell violin discover limit lottery anger baby leaf mountain peasant rude scene abstract casual\"\n  )\n];\n\nexport function signTxnWithTestAccount(txn: algosdk.Transaction): Uint8Array {\n  const sender = algosdk.encodeAddress(txn.from.publicKey);\n\n  for (const testAccount of testAccounts) {\n    if (testAccount.addr === sender) {\n      return txn.signTxn(testAccount.sk);\n    }\n  }\n\n  throw new Error(`Cannot sign transaction from unknown test account: ${sender}`);\n}\n\nexport interface IScenarioTxn {\n  txn: algosdk.Transaction;\n  signers?: string[];\n  authAddr?: string;\n  message?: string;\n}\n\nexport type ScenarioReturnType = {\n  transaction: IScenarioTxn[][];\n  transactionTimeout?: number;\n};\n\nexport type Scenario = (chain: ChainType, address: string) => Promise<ScenarioReturnType>;\n\nexport enum AssetTransactionType {\n  Transfer = \"asset-transfer\",\n  OptIn = \"asset-opt-in\",\n  Close = \"asset-close\"\n}\n\nfunction getAssetIndex(chain: ChainType, type: AssetTransactionType): number {\n  if (chain === ChainType.MainNet) {\n    if (type === AssetTransactionType.Transfer) {\n      return 604; // IanCoin\n    } else if (type === AssetTransactionType.Close) {\n      return 672; // RotemCoin\n    } else {\n      return 312769; // Tether USDt\n    }\n  }\n\n  if (type === AssetTransactionType.Transfer) {\n    return 11711; // HipoCoin\n  } else if (type === AssetTransactionType.Close) {\n    return 180132; // testasset2\n  } else {\n    return 135270; // Turkish Lira\n  }\n}\n\nfunction getAppIndex(chain: ChainType): number {\n  if (chain === ChainType.MainNet) {\n    return 305162725;\n  }\n\n  if (chain === ChainType.TestNet) {\n    return 22314999;\n  }\n\n  throw new Error(`App not defined for chain ${chain}`);\n}\n\nconst createAssetOptInTxn = async (\n  chain: ChainType,\n  address: string,\n  assetIndex: number\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 0,\n    assetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singlePayTxn: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn, message: \"This is a transaction message\"}];\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singlePayTxnWithClose: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    closeRemainderTo: testAccounts[1].addr,\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singlePayTxnWithRekey: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    rekeyTo: testAccounts[2].addr,\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singlePayTxnWithRekeyAndClose: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    rekeyTo: testAccounts[2].addr,\n    closeRemainderTo: testAccounts[1].addr,\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singlePayTxnWithInvalidAuthAddress: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [\n    {txn, message: \"This is a transaction message\", authAddr: \"INVALID_ADDRESS\"}\n  ];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singleAssetOptInTxn: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const assetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\n\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 0,\n    assetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singleAssetOptInTxnToInvalidAsset: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const assetIndex = 100;\n\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 0,\n    assetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singleAssetTransferTxn: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const assetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\n\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 1000000,\n    assetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singleAssetTransferTxnWithClose: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const assetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\n\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 1000000,\n    assetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    closeRemainderTo: testAccounts[1].addr,\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn, message: \"This is a transaction message\"}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singleInvalidAssetTransferTxn: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const assetIndex = 100; // Invalid asset id\n\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 1000000,\n    assetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singleAppOptIn: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const appIndex = getAppIndex(chain);\n\n  const txn = algosdk.makeApplicationOptInTxnFromObject({\n    from: address,\n    appIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singleAppOptInWithAppRekey: Scenario = async (\n  chain: ChainType\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const appIndex = getAppIndex(chain);\n\n  const txn = algosdk.makeApplicationOptInTxnFromObject({\n    from: testAccounts[1].addr,\n    appIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n    rekeyTo: testAccounts[2].addr,\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singleAppCall: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const appIndex = getAppIndex(chain);\n\n  const txn = algosdk.makeApplicationNoOpTxnFromObject({\n    from: address,\n    appIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singleAppCallNoArgs: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const appIndex = getAppIndex(chain);\n\n  const txn = algosdk.makeApplicationNoOpTxnFromObject({\n    from: address,\n    appIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    appArgs: [],\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singleAppCallWithRekey: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const appIndex = getAppIndex(chain);\n\n  const txn = algosdk.makeApplicationNoOpTxnFromObject({\n    from: address,\n    appIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n    rekeyTo: testAccounts[2].addr,\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singleAppCloseOut: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const appIndex = getAppIndex(chain);\n\n  const txn = algosdk.makeApplicationCloseOutTxnFromObject({\n    from: address,\n    appIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn, message: \"This is a transaction message\"}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singleAppClearState: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const appIndex = getAppIndex(chain);\n\n  const txn = algosdk.makeApplicationClearStateTxnFromObject({\n    from: address,\n    appIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singleAppCreate: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const approvalProgram = Uint8Array.from([4, 129, 1, 67]);\n  const clearProgram = Uint8Array.from([3, 129, 1, 67]);\n\n  const txn = algosdk.makeApplicationCreateTxnFromObject({\n    from: address,\n    approvalProgram,\n    clearProgram,\n    numGlobalInts: 1,\n    numGlobalByteSlices: 2,\n    numLocalInts: 3,\n    numLocalByteSlices: 4,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singleAppCreateExtraPage: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const approvalProgram = Uint8Array.from([4, 129, 1, 67]);\n  const clearProgram = Uint8Array.from([3, 129, 1, 67]);\n\n  const txn = algosdk.makeApplicationCreateTxnFromObject({\n    from: address,\n    approvalProgram,\n    clearProgram,\n    numGlobalInts: 1,\n    numGlobalByteSlices: 2,\n    numLocalInts: 3,\n    numLocalByteSlices: 4,\n    extraPages: 1,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singleAppUpdate: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const approvalProgram = Uint8Array.from([4, 129, 1, 67]);\n  const clearProgram = Uint8Array.from([3, 129, 1, 67]);\n\n  const appIndex = getAppIndex(chain);\n\n  const txn = algosdk.makeApplicationUpdateTxnFromObject({\n    from: address,\n    appIndex,\n    approvalProgram,\n    clearProgram,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst singleAppDelete: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const appIndex = getAppIndex(chain);\n\n  const txn = algosdk.makeApplicationDeleteTxnFromObject({\n    from: address,\n    appIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst sign1FromGroupTxn: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\n  const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\n\n  const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 0,\n    assetIndex: optInAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 1000000,\n    assetIndex: transferAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn: txn1}, {txn: txn2, signers: []}];\n\n  algosdk.assignGroupID(txnsToSign.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst sign2FromGroupTxn: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\n  const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\n\n  const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 0,\n    assetIndex: optInAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 1000000,\n    assetIndex: transferAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 500000,\n    note: new Uint8Array(Buffer.from(\"this is a payment txn\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [\n    {txn: txn1},\n    {txn: txn2, signers: []},\n    {txn: txn3, message: \"This is a transaction message\"}\n  ];\n\n  algosdk.assignGroupID(txnsToSign.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst signGroupWithPayOptinTransfer: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\n  const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\n\n  const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 500000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 0,\n    assetIndex: optInAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 1000000,\n    assetIndex: transferAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn: txn1}, {txn: txn2}, {txn: txn3}];\n\n  algosdk.assignGroupID(txnsToSign.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst signGroupWithPayRekey: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 500000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 500000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    rekeyTo: testAccounts[2].addr,\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn: txn1}, {txn: txn2, message: \"This is a transaction message\"}];\n\n  algosdk.assignGroupID(txnsToSign.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst signTxnWithAssetClose: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const assetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\n  const closeAssetIndex = getAssetIndex(chain, AssetTransactionType.Close);\n\n  const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 50,\n    assetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 50,\n    assetIndex: closeAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    closeRemainderTo: testAccounts[1].addr,\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn: txn1}, {txn: txn2}];\n\n  algosdk.assignGroupID(txnsToSign.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst signTxnWithRekey: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const assetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\n\n  const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 50,\n    assetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 50,\n    assetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    rekeyTo: testAccounts[2].addr,\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn: txn1, message: \"This is a transaction message\"}, {txn: txn2}];\n\n  algosdk.assignGroupID(txnsToSign.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst signTxnWithRekeyAndAssetClose: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const closeAssetIndex = getAssetIndex(chain, AssetTransactionType.Close);\n  const assetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\n\n  const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    assetIndex,\n    amount: 10,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 20,\n    assetIndex: closeAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    closeRemainderTo: testAccounts[1].addr,\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 30,\n    assetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    rekeyTo: testAccounts[2].addr,\n    suggestedParams\n  });\n\n  const txn4 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 40,\n    assetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    closeRemainderTo: testAccounts[1].addr,\n    rekeyTo: testAccounts[2].addr,\n    suggestedParams\n  });\n\n  const txnsToSign = [\n    {txn: txn1, message: \"This is a transaction message\"},\n    {txn: txn2},\n    {txn: txn3},\n    {txn: txn4, message: \"This is a transaction message\"}\n  ];\n\n  algosdk.assignGroupID(txnsToSign.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst signGroupOf7: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\n  const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\n  const closeAssetIndex = getAssetIndex(chain, AssetTransactionType.Close);\n\n  const optIn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 0,\n    assetIndex: optInAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const assetXfer = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 50,\n    assetIndex: transferAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const assetClose = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 50,\n    assetIndex: closeAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    closeRemainderTo: testAccounts[1].addr,\n    suggestedParams\n  });\n\n  const payment = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 500000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const accountClose = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 0,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    closeRemainderTo: testAccounts[1].addr,\n    suggestedParams\n  });\n\n  const accountRekey = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 1000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    rekeyTo: testAccounts[2].addr,\n    suggestedParams\n  });\n\n  const accountRekeyAndClose = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 50000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    closeRemainderTo: testAccounts[1].addr,\n    rekeyTo: testAccounts[2].addr,\n    suggestedParams\n  });\n\n  const txnsToSign = [\n    {txn: optIn},\n    {txn: assetXfer},\n    {txn: assetClose},\n    {txn: payment},\n    {txn: accountClose},\n    {txn: accountRekey},\n    {txn: accountRekeyAndClose}\n  ];\n\n  algosdk.assignGroupID(txnsToSign.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst fullTxnGroup: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txnsToSign: Array<{txn: algosdk.Transaction; signers?: [string]}> = [];\n\n  for (let i = 0; i < 8; i++) {\n    const assetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\n\n    const optIn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n      from: address,\n      to: address,\n      amount: 0,\n      assetIndex,\n      note: new Uint8Array(Buffer.from(\"example note value\")),\n      suggestedParams\n    });\n\n    const closeOut = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n      from: address,\n      to: address,\n      amount: 0,\n      assetIndex,\n      note: new Uint8Array(Buffer.from(\"example note value\")),\n      closeRemainderTo: testAccounts[1].addr,\n      suggestedParams\n    });\n\n    txnsToSign.push({txn: optIn});\n    txnsToSign.push({txn: closeOut});\n  }\n\n  algosdk.assignGroupID(txnsToSign.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst multipleNonAtomicTxns: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100001,\n    note: new Uint8Array(Buffer.from(\"txn 1\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100002,\n    note: new Uint8Array(Buffer.from(\"txn 2\")),\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100003,\n    note: new Uint8Array(Buffer.from(\"txn 3\")),\n    suggestedParams\n  });\n\n  const group1 = [{txn: txn1}];\n\n  const group2 = [{txn: txn2, message: \"This is a transaction message\"}];\n\n  const group3 = [{txn: txn3}];\n\n  return {\n    transaction: [group1, group2, group3]\n  };\n};\n\nconst multipleNonAtomicTxnsForOnlyAssets: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\n  const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\n\n  const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 0,\n    assetIndex: optInAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 10000,\n    assetIndex: transferAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 30000,\n    assetIndex: transferAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const group1 = [{txn: txn1}];\n\n  const group2 = [{txn: txn2}];\n\n  const group3 = [{txn: txn3, message: \"This is a transaction message\"}];\n\n  return {\n    transaction: [group1, group2, group3]\n  };\n};\n\nconst multipleNonAtomicTxnsMixed: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\n  const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\n\n  const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100001,\n    note: new Uint8Array(Buffer.from(\"txn 1\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 0,\n    assetIndex: optInAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 10000,\n    assetIndex: transferAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const group1 = [{txn: txn1}];\n\n  const group2 = [{txn: txn2}];\n\n  const group3 = [{txn: txn3}];\n\n  return {\n    transaction: [group1, group2, group3]\n  };\n};\n\nconst atomicGroupAndNonAtomicTxnsForOnlyPayment: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100001,\n    note: new Uint8Array(Buffer.from(\"atomic group 1 txn 1\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100002,\n    note: new Uint8Array(Buffer.from(\"atomic group 2 txn 2\")),\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100003,\n    note: new Uint8Array(Buffer.from(\"txn 3\")),\n    suggestedParams\n  });\n\n  const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100004,\n    note: new Uint8Array(Buffer.from(\"txn 4\")),\n    suggestedParams\n  });\n\n  const group1 = [\n    {txn: txn1, message: \"This is a transaction message\"},\n    {txn: txn2, message: \"This is a transaction message\"}\n  ];\n  algosdk.assignGroupID(group1.map((toSign) => toSign.txn));\n\n  const group2 = [{txn: txn3}];\n\n  const group3 = [{txn: txn4}];\n\n  return {\n    transaction: [group1, group2, group3]\n  };\n};\n\nconst atomicGroupAndNonAtomicTxnsMixed: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\n  const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\n\n  const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100001,\n    note: new Uint8Array(Buffer.from(\"atomic group 1 txn 1\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 0,\n    assetIndex: optInAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 10000,\n    assetIndex: transferAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100004,\n    note: new Uint8Array(Buffer.from(\"txn 4\")),\n    suggestedParams\n  });\n\n  const group1 = [{txn: txn1}, {txn: txn2}];\n  algosdk.assignGroupID(group1.map((toSign) => toSign.txn));\n\n  const group2 = [{txn: txn3, message: \"This is a transaction message\"}];\n\n  const group3 = [{txn: txn4}];\n\n  return {\n    transaction: [group1, group2, group3]\n  };\n};\n\nconst multipleAtomicGroupsForOnlyPayment: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100001,\n    note: new Uint8Array(Buffer.from(\"atomic group 1 txn 1\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100002,\n    note: new Uint8Array(Buffer.from(\"atomic group 1 txn 2\")),\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100003,\n    note: new Uint8Array(Buffer.from(\"atomic group 2 txn 1\")),\n    suggestedParams\n  });\n\n  const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100004,\n    note: new Uint8Array(Buffer.from(\"atomic group 2 txn 2\")),\n    suggestedParams\n  });\n\n  const group1 = [{txn: txn1}, {txn: txn2}];\n  algosdk.assignGroupID(group1.map((toSign) => toSign.txn));\n\n  const group2 = [{txn: txn3}, {txn: txn4}];\n  algosdk.assignGroupID(group2.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [group1, group2]\n  };\n};\n\nconst multipleAtomicGroupsForOnlyAssets: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\n  const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\n\n  const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 0,\n    assetIndex: optInAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 10000,\n    assetIndex: transferAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 0,\n    assetIndex: optInAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn4 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 2000,\n    assetIndex: transferAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const group1 = [{txn: txn1}, {txn: txn2, signers: []}];\n  algosdk.assignGroupID(group1.map((toSign) => toSign.txn));\n\n  const group2 = [{txn: txn3}, {txn: txn4, signers: []}];\n  algosdk.assignGroupID(group2.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [group1, group2]\n  };\n};\n\nconst multipleAtomicGroupsWithInvalidAsset: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const invalidAssetIndex = 100;\n\n  const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100001,\n    note: new Uint8Array(Buffer.from(\"atomic group 1 txn 1\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 2000,\n    assetIndex: invalidAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n  const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100003,\n    note: new Uint8Array(Buffer.from(\"atomic group 2 txn 1\")),\n    suggestedParams\n  });\n\n  const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100004,\n    note: new Uint8Array(Buffer.from(\"atomic group 2 txn 2\")),\n    suggestedParams\n  });\n\n  const group1 = [{txn: txn1}, {txn: txn2}];\n  algosdk.assignGroupID(group1.map((toSign) => toSign.txn));\n\n  const group2 = [{txn: txn3}, {txn: txn4}];\n  algosdk.assignGroupID(group2.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [group1, group2]\n  };\n};\n\nconst multipleAtomicGroupsMixed1: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\n  const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\n\n  const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100001,\n    note: new Uint8Array(Buffer.from(\"atomic group 1 txn 1\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 10000,\n    assetIndex: transferAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 0,\n    assetIndex: optInAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100004,\n    note: new Uint8Array(Buffer.from(\"atomic group 2 txn 2\")),\n    suggestedParams\n  });\n\n  const group1 = [{txn: txn1}, {txn: txn2, signers: []}];\n  algosdk.assignGroupID(group1.map((toSign) => toSign.txn));\n\n  const group2 = [{txn: txn3}, {txn: txn4}];\n  algosdk.assignGroupID(group2.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [group1, group2]\n  };\n};\n\nconst multipleAtomicGroupsMixed2: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n  const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\n  const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\n\n  const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100001,\n    note: new Uint8Array(Buffer.from(\"atomic group 1 txn 1\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100002,\n    note: new Uint8Array(Buffer.from(\"atomic group 1 txn 2\")),\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 2000,\n    assetIndex: transferAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn4 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 0,\n    assetIndex: optInAssetIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const group1 = [{txn: txn1}, {txn: txn2}];\n  algosdk.assignGroupID(group1.map((toSign) => toSign.txn));\n\n  const group2 = [{txn: txn3, signers: []}, {txn: txn4}];\n  algosdk.assignGroupID(group2.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [group1, group2]\n  };\n};\n\nconst multipleAtomicGroupSignOnly2: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 100001,\n    note: new Uint8Array(Buffer.from(\"atomic group 1 txn 1\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100002,\n    note: new Uint8Array(Buffer.from(\"atomic group 2 txn 2\")),\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 100003,\n    note: new Uint8Array(Buffer.from(\"txn 3\")),\n    suggestedParams\n  });\n\n  const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100004,\n    note: new Uint8Array(Buffer.from(\"txn 4\")),\n    suggestedParams\n  });\n\n  const group1 = [{txn: txn1, signers: []}, {txn: txn2}];\n  algosdk.assignGroupID(group1.map((toSign) => toSign.txn));\n\n  const group2 = [{txn: txn3, signers: []}, {txn: txn4}];\n  algosdk.assignGroupID(group2.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [group1, group2]\n  };\n};\n\nconst atomicGroupAndNonAtomicTxnsSignOnly2: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 100001,\n    note: new Uint8Array(Buffer.from(\"atomic group 1 txn 1\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100002,\n    note: new Uint8Array(Buffer.from(\"atomic group 2 txn 2\")),\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100003,\n    note: new Uint8Array(Buffer.from(\"txn 3\")),\n    suggestedParams\n  });\n\n  const group1 = [{txn: txn1, signers: []}, {txn: txn2}];\n  algosdk.assignGroupID(group1.map((toSign) => toSign.txn));\n\n  const group2 = [{txn: txn3}];\n\n  return {\n    transaction: [group1, group2]\n  };\n};\n\nconst atomicNoSignTxn: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 100001,\n    note: new Uint8Array(Buffer.from(\"txn 1\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 100002,\n    note: new Uint8Array(Buffer.from(\"txn 2\")),\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 100003,\n    note: new Uint8Array(Buffer.from(\"txn 3\")),\n    suggestedParams\n  });\n\n  const group1 = [\n    {txn: txn1, signers: []},\n    {txn: txn2, signers: []},\n    {txn: txn3, signers: []}\n  ];\n  algosdk.assignGroupID(group1.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [group1]\n  };\n};\n\nconst atomicAndSingleNoSignTxn: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100001,\n    note: new Uint8Array(Buffer.from(\"txn 1\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100002,\n    note: new Uint8Array(Buffer.from(\"txn 2\")),\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 100003,\n    note: new Uint8Array(Buffer.from(\"txn 3\")),\n    suggestedParams\n  });\n\n  const group1 = [{txn: txn1}];\n\n  const group2 = [{txn: txn2, message: \"This is a transaction message\"}];\n\n  const group3 = [{txn: txn3, signers: []}];\n\n  return {\n    transaction: [group1, group2, group3]\n  };\n};\n\nconst txnWithLargeNote: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100000,\n    note: new Uint8Array(Buffer.from(\"max length note (512)\" + \"!\".repeat(491))),\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn, message: \"This is a transaction message\"}];\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst assetCreateTxnMaxInfoAndRekey: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makeAssetCreateTxnWithSuggestedParamsFromObject({\n    from: address,\n    decimals: 2,\n    defaultFrozen: false,\n    total: BigInt(\"0xffffffffffffffff\"),\n    assetName: \"Example asset\",\n    unitName: \"EX\",\n    assetURL: \"https://example.com\",\n    assetMetadataHash: new Uint8Array(\n      Buffer.from(\n        \"59fc007607ccc82d96f016857aaa697c545002d18045e49324696f12b7be8f45\",\n        \"hex\"\n      )\n    ),\n    manager: address,\n    reserve: testAccounts[0].addr,\n    clawback: testAccounts[1].addr,\n    freeze: testAccounts[2].addr,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    rekeyTo: testAccounts[1].addr,\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn, message: \"This is a transaction message\"}];\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst assetCreateTxnMinInfo: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makeAssetCreateTxnWithSuggestedParamsFromObject({\n    from: address,\n    decimals: 0,\n    defaultFrozen: false,\n    total: 1,\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn, message: \"This is a transaction message\"}];\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst assetReconfigTxnResetAll: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makeAssetConfigTxnWithSuggestedParamsFromObject({\n    from: address,\n    assetIndex: getAssetIndex(chain, AssetTransactionType.Transfer),\n    clawback: address,\n    freeze: testAccounts[0].addr,\n    manager: testAccounts[1].addr,\n    reserve: testAccounts[2].addr,\n    strictEmptyAddressChecking: true,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn, message: \"This is a transaction message\"}];\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst assetReconfigTxnClearAll: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makeAssetConfigTxnWithSuggestedParamsFromObject({\n    from: address,\n    assetIndex: getAssetIndex(chain, AssetTransactionType.Transfer),\n    strictEmptyAddressChecking: false,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn, message: \"This is a transaction message\"}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst assetDeleteTxn: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makeAssetDestroyTxnWithSuggestedParamsFromObject({\n    from: address,\n    assetIndex: getAssetIndex(chain, AssetTransactionType.Transfer),\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn, message: \"This is a transaction message\"}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst zeroFeeTxnGroup: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 100001,\n    note: new Uint8Array(Buffer.from(\"txn with 0 fee\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100001,\n    note: new Uint8Array(Buffer.from(\"txn with double fee\")),\n    suggestedParams\n  });\n\n  txn2.fee += txn1.fee;\n  txn1.fee = 0;\n\n  const group1 = [{txn: txn1, signers: []}, {txn: txn2}];\n  algosdk.assignGroupID(group1.map((toSign) => toSign.txn));\n\n  return {\n    transaction: [group1]\n  };\n};\n\nconst maxNumberOfTxns: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const groups: Array<Array<{txn: algosdk.Transaction}>> = [];\n\n  const numGroups = 4; // 64 / 16\n  for (let i = 0; i < numGroups; i++) {\n    const group: Array<{txn: algosdk.Transaction}> = [];\n    for (let j = 0; j < 16; j++) {\n      group.push({\n        txn: algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: testAccounts[0].addr,\n          amount: 0,\n          note: new Uint8Array(Buffer.from(`No ${i * 16 + j + 1} of 64`)),\n          suggestedParams\n        })\n      });\n    }\n\n    algosdk.assignGroupID(group.map((toSign) => toSign.txn));\n    groups.push(group);\n  }\n\n  return {\n    transaction: groups\n  };\n};\n\nconst tooManyTxns: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const groups: Array<Array<{txn: algosdk.Transaction}>> = [];\n\n  const numGroups = 4; // 64 / 16\n  for (let i = 0; i < numGroups; i++) {\n    const group: Array<{txn: algosdk.Transaction}> = [];\n    for (let j = 0; j < 16; j++) {\n      group.push({\n        txn: algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: testAccounts[0].addr,\n          amount: 0,\n          note: new Uint8Array(Buffer.from(`No ${i * 16 + j + 1} of 65`)),\n          suggestedParams\n        })\n      });\n    }\n\n    algosdk.assignGroupID(group.map((toSign) => toSign.txn));\n    groups.push(group);\n  }\n\n  // one more!\n  groups.push([\n    {\n      txn: algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: address,\n        to: testAccounts[0].addr,\n        amount: 0,\n        note: new Uint8Array(Buffer.from(`No 65 of 65`)),\n        suggestedParams\n      })\n    }\n  ]);\n\n  return {\n    transaction: groups\n  };\n};\n\nconst fiveHundredTxns: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const groups: Array<Array<{txn: algosdk.Transaction}>> = [];\n\n  const numGroups = 32; // 64 / 16\n  for (let i = 0; i < numGroups; i++) {\n    const group: Array<{txn: algosdk.Transaction}> = [];\n    for (let j = 0; j < 16; j++) {\n      group.push({\n        txn: algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: testAccounts[0].addr,\n          amount: 0,\n          note: new Uint8Array(Buffer.from(`No ${i * 16 + j + 1} of 64`)),\n          suggestedParams\n        })\n      });\n    }\n\n    algosdk.assignGroupID(group.map((toSign) => toSign.txn));\n    groups.push(group);\n  }\n\n  return {\n    transaction: groups\n  };\n};\n\nconst futureTransaction: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const minutes = prompt(\"Please enter minutes for future transaction: \");\n  const exactDate = new Date().getTime();\n  const futureTrxDate = exactDate + Number(minutes) * 60000;\n\n  const differenceInSeconds = Math.round((futureTrxDate - exactDate) / 1000);\n  const blockRound = Math.abs(Math.round(differenceInSeconds / 4));\n\n  const firstRoundFuture = suggestedParams.firstRound + blockRound;\n  const lastRoundFuture = firstRoundFuture + 1000;\n\n  const newSuggestedParams: SuggestedParams = {\n    fee: suggestedParams.fee,\n    firstRound: firstRoundFuture,\n    lastRound: lastRoundFuture,\n    genesisHash: suggestedParams.genesisHash,\n    genesisID: suggestedParams.genesisID\n  };\n\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100000,\n    note: new Uint8Array(Buffer.from(\"Example future transaction\")),\n    suggestedParams: newSuggestedParams\n  });\n\n  const txnsToSign = [{txn, message: \"This is a transaction message\"}];\n\n  return {\n    transaction: [txnsToSign],\n    transactionTimeout: differenceInSeconds * 1000\n  };\n};\n\nconst invalidGroupingIssue: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 1000000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 1000000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 1000000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 1000000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txn5 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: testAccounts[0].addr,\n    to: address,\n    amount: 1000000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn: txn1}, {txn: txn2}, {txn: txn3}, {txn: txn4}, {txn: txn5}];\n\n  algosdk.assignGroupID(txnsToSign.map((toSign) => toSign.txn));\n\n  txnsToSign.pop();\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst appCallWithBoxes: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const appIndex = getAppIndex(chain);\n\n  const txn = algosdk.makeApplicationNoOpTxnFromObject({\n    from: address,\n    appIndex,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    appArgs: [],\n    suggestedParams,\n    boxes: [{appIndex: appIndex, name: Uint8Array.from([0])}]\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst invalidAuthAddress: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [\n    {txn, message: \"This is a transaction message\", authAddr: \"INVALID_ADDRESS\"}\n  ];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst validAuthAddress: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [\n    {txn, message: \"This is a transaction message\", authAddr: testAccounts[1].addr}\n  ];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst invalidSignerAddress: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [\n    {txn, message: \"This is a transaction message\", signers: [\"INVALID_ADDRESS\"]}\n  ];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst validSignerAddress: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 100000,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [\n    {\n      txn,\n      message: \"This is a transaction message\",\n      signers: [address]\n    }\n  ];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\nconst swapAlgoToUSDC: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const groups: Array<Array<{txn: algosdk.Transaction}>> = [\n    [\n      {\n        txn: algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: address,\n          amount: 0,\n          assetIndex: 31566704,\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: \"NGIHJMECRSFHIEQDHBVTLR54K7DOZWM5M6UM3A5CIOYSP6H3QTGSHHGJCQ\",\n          amount: 5000000,\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makeApplicationNoOpTxnFromObject({\n          from: address,\n          appIndex: 605929989,\n          appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n          suggestedParams\n        })\n      }\n    ]\n  ];\n\n  groups[2][0].txn.fee = 2000;\n\n  // Assign Group ID\n  groups.forEach((txns) => algosdk.assignGroupID(txns.map((toSign) => toSign.txn)));\n\n  return {\n    transaction: groups\n  };\n};\n\nconst swapAlgoToGoETH: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const groups: Array<Array<{txn: algosdk.Transaction}>> = [\n    [\n      {\n        txn: algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: address,\n          amount: 0,\n          assetIndex: 386195940,\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: \"6NXX7RGJFLEI3HEQEZXDP73SMQKAPWS4N7CEQJ4IEVONUWYWJLT4NM5QQM\",\n          amount: 3000000,\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makeApplicationNoOpTxnFromObject({\n          from: address,\n          appIndex: 607660059,\n          appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n          suggestedParams\n        })\n      }\n    ]\n  ];\n\n  groups[2][0].txn.fee = 2000;\n\n  // Assign Group ID\n  groups.forEach((txns) => algosdk.assignGroupID(txns.map((toSign) => toSign.txn)));\n\n  return {\n    transaction: groups\n  };\n};\n\nconst depositAlgoFF: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const groups: Array<Array<{txn: algosdk.Transaction}>> = [\n    [\n      {\n        txn: algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: \"AV6PFVXWDQ7RVNQYOEXCWXCLXVJ5V57WVMVQZ2TWH4EKTB7GSWKUIAUPXQ\",\n          amount: 2000000,\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makeApplicationNoOpTxnFromObject({\n          from: address,\n          appIndex: 686498781,\n          appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\n          suggestedParams\n        })\n      }\n    ]\n  ];\n\n  groups[1][0].txn.fee = 3000;\n\n  // Assign Group ID\n  groups.forEach((txns) => algosdk.assignGroupID(txns.map((toSign) => toSign.txn)));\n\n  return {\n    transaction: groups\n  };\n};\n\nconst poolAlgoUsdcFF: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const groups: Array<Array<{txn: algosdk.Transaction}>> = [\n    [\n      {\n        txn: algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: address,\n          amount: 0,\n          assetIndex: 919950894,\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: \"KIW56KLIBX5UMWS5RT346TNA4HRV5H445S2LMQLRCR73SOHRVSM5TZBQ4A\",\n          amount: 1160825,\n          assetIndex: 31566704,\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: \"KIW56KLIBX5UMWS5RT346TNA4HRV5H445S2LMQLRCR73SOHRVSM5TZBQ4A\",\n          amount: 3977452,\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makeApplicationNoOpTxnFromObject({\n          from: address,\n          appIndex: 919954173,\n          appArgs: [new Uint8Array(Buffer.from(\"pool_step_1\"))],\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makeApplicationNoOpTxnFromObject({\n          from: address,\n          appIndex: 919954173,\n          appArgs: [new Uint8Array(Buffer.from(\"pool_step_2\"))],\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makeApplicationNoOpTxnFromObject({\n          from: address,\n          appIndex: 919954173,\n          appArgs: [new Uint8Array(Buffer.from(\"pool_step_3\"))],\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makeApplicationNoOpTxnFromObject({\n          from: address,\n          appIndex: 919954173,\n          appArgs: [new Uint8Array(Buffer.from(\"pool_step_4\"))],\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makeApplicationNoOpTxnFromObject({\n          from: address,\n          appIndex: 919954173,\n          appArgs: [new Uint8Array(Buffer.from(\"pool_step_5\"))],\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makeApplicationNoOpTxnFromObject({\n          from: address,\n          appIndex: 919954173,\n          appArgs: [new Uint8Array(Buffer.from(\"pool_step_6\"))],\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makeApplicationNoOpTxnFromObject({\n          from: address,\n          appIndex: 919954173,\n          appArgs: [new Uint8Array(Buffer.from(\"pool_step_7\"))],\n          suggestedParams\n        })\n      }\n    ]\n  ];\n\n  groups[3][0].txn.fee = 29000;\n\n  // Assign Group ID\n  groups.forEach((txns) => algosdk.assignGroupID(txns.map((toSign) => toSign.txn)));\n\n  return {\n    transaction: groups\n  };\n};\n\nconst authAlgoGems: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const groups: Array<Array<{txn: algosdk.Transaction}>> = [\n    [\n      {\n        txn: algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: address,\n          amount: 0,\n          note: new Uint8Array(Buffer.from(\"challenge/1449301/gems\")),\n          suggestedParams\n        })\n      }\n    ]\n  ];\n\n  return {\n    transaction: groups\n  };\n};\n\nconst buyNFTAlgogems: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const groups: Array<Array<{txn: algosdk.Transaction}>> = [\n    [\n      {\n        txn: algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: address,\n          amount: 0,\n          assetIndex: 886237574,\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: \"N4EJ2ZFGWCEL4PVTCJSLD7RC4WVIUNO57V7LW2FQY7DFOP4EEN4XYC5UEM\",\n          to: address,\n          amount: 1,\n          assetIndex: 886237574,\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: \"RJASLRMECMQL66PH2KLMFSCYMOOBOK7KRX3XMAWDKDB2PQ5J3U5FMPAJNE\",\n          amount: 3600000,\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: \"VWZBFLBUN6O5A5W6IWHMDUVP5NH2LPV4ZYFMAHP4FQBBYP627MP6WPOEG4\",\n          amount: 400000,\n          suggestedParams\n        })\n      }\n    ]\n  ];\n\n  // Assign Group ID\n  groups.forEach((txns) => algosdk.assignGroupID(txns.map((toSign) => toSign.txn)));\n\n  return {\n    transaction: groups\n  };\n};\n\nconst buyNFTAlgoxNFT: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const groups: Array<Array<{txn: algosdk.Transaction}>> = [\n    [\n      {\n        txn: algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: address,\n          amount: 0,\n          assetIndex: 865021507,\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: \"CATN6JYGMBZF4OAQBXZTGALLB3X3XUUU6CQAKXUPNKVOC32VNTRWK25HD4\",\n          to: address,\n          amount: 1,\n          assetIndex: 865021507,\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: \"BSKX6GSPTSY2KKXBO5L367OBY5SJT6GD25FV3RY25VLOGCMORQ6COPCOXY\",\n          amount: 196900,\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: \"ANGEL3CMT7TEXSBJR3DCTJTZCQFOF6FJB6PDKU4IOAMTNPXGR7XUYKOU5Y\",\n          amount: 18803950,\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: \"XNFT36FUCFRR6CK675FW4BEBCCCOJ4HOSMGCN6J2W6ZMB34KM2ENTNQCP4\",\n          amount: 689150,\n          suggestedParams\n        })\n      }\n    ],\n    [\n      {\n        txn: algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: \"CATN6JYGMBZF4OAQBXZTGALLB3X3XUUU6CQAKXUPNKVOC32VNTRWK25HD4\",\n          amount: 1000,\n          suggestedParams\n        })\n      }\n    ]\n  ];\n\n  // Assign Group ID\n  groups.forEach((txns) => algosdk.assignGroupID(txns.map((toSign) => toSign.txn)));\n\n  return {\n    transaction: groups\n  };\n};\n\nconst singleZoneTransferTxn: Scenario = async (\n  chain: ChainType,\n  address: string\n): Promise<ScenarioReturnType> => {\n  const suggestedParams = await apiGetTxnParams(chain);\n\n  const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: testAccounts[0].addr,\n    amount: 1000000,\n    assetIndex: 444035862,\n    note: new Uint8Array(Buffer.from(\"example note value\")),\n    suggestedParams\n  });\n\n  const txnsToSign = [{txn}];\n\n  return {\n    transaction: [txnsToSign]\n  };\n};\n\n// const notiboyGlobalOptIn: Scenario = async (\n//   chain: ChainType,\n//   address: string\n// ): Promise<ScenarioReturnType> => {\n//   const indexer = new algosdk.Indexer(\"\", \"https://mainnet-idx.algonode.cloud\", \"\");\n//   const notiboy = new Notiboy(clientForChain(chain), indexer);\n//   const userGlobalOptin = await notiboy.userContractOptin(address);\n//   const transactions: IScenarioTxn[][] = [];\n//   userGlobalOptin.map((txn) => {\n//     transactions.push([{txn}]);\n//   });\n\n//   return {\n//     transaction: transactions\n//   };\n// };\n\n// const notiboyChannelOptIn: Scenario = async (\n//   chain: ChainType,\n//   address: string\n// ): Promise<ScenarioReturnType> => {\n//   const indexer = new algosdk.Indexer(\"\", \"https://mainnet-idx.algonode.cloud\", \"\");\n//   const notiboy = new Notiboy(clientForChain(chain), indexer);\n//   const channelOptinTxn = await notiboy.userChannelOptin(address, 1025363595);\n\n//   return {\n//     transaction: [[{txn: channelOptinTxn}]]\n//   };\n// };\n\nexport const mainnetScenarios: Array<{name: string; scenario: Scenario}> = [\n  {\n    name: \"1. Swap Algo to USDC (algofi)\",\n    scenario: swapAlgoToUSDC\n  },\n  {\n    name: \"2. Swap Algo to GoETH (algofi)\",\n    scenario: swapAlgoToGoETH\n  },\n  {\n    name: \"3. Deposit Algo (folksfinance)\",\n    scenario: depositAlgoFF\n  },\n  {\n    name: \"4. Pool ALGO-USDC (folksfinance)\",\n    scenario: poolAlgoUsdcFF\n  },\n  {\n    name: \"5. Auth (algogems)\",\n    scenario: authAlgoGems\n  },\n  {\n    name: \"6. Buy NFT (algogems)\",\n    scenario: buyNFTAlgogems\n  },\n  {\n    name: \"7. Buy NFT (algoxnft)\",\n    scenario: buyNFTAlgoxNFT\n  },\n  {\n    name: \"8. Zone Transfer\",\n    scenario: singleZoneTransferTxn\n  },\n  // {\n  //   name: \"9. Notiboy Global Optin\",\n  //   scenario: notiboyGlobalOptIn\n  // },\n  // {\n  //   name: \"10. Notiboy Channel Optin\",\n  //   scenario: notiboyChannelOptIn\n  // }\n];\n\nexport const scenarios: Array<{name: string; scenario: Scenario}> = [\n  {\n    name: \"1. Sign single pay txn\",\n    scenario: singlePayTxn\n  },\n  {\n    name: \"2. Sign single pay txn with close\",\n    scenario: singlePayTxnWithClose\n  },\n  {\n    name: \"3. Sign single pay txn with rekey\",\n    scenario: singlePayTxnWithRekey\n  },\n  {\n    name: \"4. Sign single pay txn with rekey and close\",\n    scenario: singlePayTxnWithRekeyAndClose\n  },\n  {\n    name: \"5. Single pay txn with invalid auth address\",\n    scenario: singlePayTxnWithInvalidAuthAddress\n  },\n  {\n    name: \"6. Sign single asset opt-in txn\",\n    scenario: singleAssetOptInTxn\n  },\n  {\n    name: \"7. Sign single asset opt-in txn with invalid asset id\",\n    scenario: singleAssetOptInTxnToInvalidAsset\n  },\n  {\n    name: \"8. Sign single asset transfer txn\",\n    scenario: singleAssetTransferTxn\n  },\n  {\n    name: \"9. Sign single asset transfer txn with close\",\n    scenario: singleAssetTransferTxnWithClose\n  },\n  {\n    name: \"10. Sign single asset transfer txn with invalid asset id\",\n    scenario: singleInvalidAssetTransferTxn\n  },\n  {\n    name: \"11. Sign single app opt-in txn\",\n    scenario: singleAppOptIn\n  },\n  {\n    name: \"12. Sign single app call txn\",\n    scenario: singleAppCall\n  },\n  {\n    name: \"13. Sign single app call txn with rekey\",\n    scenario: singleAppCallWithRekey\n  },\n  {\n    name: \"14. Sign single app close out txn\",\n    scenario: singleAppCloseOut\n  },\n  {\n    name: \"15. Sign 1 of 2 txns from a group\",\n    scenario: sign1FromGroupTxn\n  },\n  {\n    name: \"16. Sign 2 of 3 txns from a group\",\n    scenario: sign2FromGroupTxn\n  },\n  {\n    name: \"17. Sign txn group with pay, asset opt-in, and asset transfer\",\n    scenario: signGroupWithPayOptinTransfer\n  },\n  {\n    name: \"18. Sign txn group with pay and rekey\",\n    scenario: signGroupWithPayRekey\n  },\n  {\n    name: \"19. Sign txn group with asset close\",\n    scenario: signTxnWithAssetClose\n  },\n  {\n    name: \"20. Sign txn group with rekey\",\n    scenario: signTxnWithRekey\n  },\n  {\n    name: \"21. Sign txn group with rekey and asset close\",\n    scenario: signTxnWithRekeyAndAssetClose\n  },\n  {\n    name: \"22. Sign group of 7\",\n    scenario: signGroupOf7\n  },\n  {\n    name: \"23. Full txn group\",\n    scenario: fullTxnGroup\n  },\n  {\n    name: \"24. Sign multiple non-atomic txns\",\n    scenario: multipleNonAtomicTxns\n  },\n  {\n    name: \"25. Sign multiple non-atomic txns for only assets\",\n    scenario: multipleNonAtomicTxnsForOnlyAssets\n  },\n  {\n    name: \"26. Sign mixed multiple non-atomic txns\",\n    scenario: multipleNonAtomicTxnsMixed\n  },\n  {\n    name: \"27. Sign atomic txn group and non-atomic txns for only payment\",\n    scenario: atomicGroupAndNonAtomicTxnsForOnlyPayment\n  },\n  {\n    name: \"28. Sign mixed atomic txn group and non-atomic txns\",\n    scenario: atomicGroupAndNonAtomicTxnsMixed\n  },\n  {\n    name: \"29. Sign multiple atomic txn groups for only payment\",\n    scenario: multipleAtomicGroupsForOnlyPayment\n  },\n  {\n    name: \"30. Sign multiple atomic txn groups for only assets\",\n    scenario: multipleAtomicGroupsForOnlyAssets\n  },\n  {\n    name: \"31. Sign multiple atomic txn groups with invalid asset\",\n    scenario: multipleAtomicGroupsWithInvalidAsset\n  },\n  {\n    name: \"32. Sign first mixed 2 atomic txn groups\",\n    scenario: multipleAtomicGroupsMixed1\n  },\n  {\n    name: \"33. Sign second mixed 2 atomic txn groups\",\n    scenario: multipleAtomicGroupsMixed2\n  },\n  {\n    name: \"34. Sign only 2 txns in multiple atomic txn groups\",\n    scenario: multipleAtomicGroupSignOnly2\n  },\n  {\n    name: \"35. Sign only 2 txns in atomic txn group and non-atomic txns\",\n    scenario: atomicGroupAndNonAtomicTxnsSignOnly2\n  },\n  {\n    name: \"36. Atomic group with no sig needed (invalid)\",\n    scenario: atomicNoSignTxn\n  },\n  {\n    name: \"37. Atomic group and single txn with no sig needed (invalid)\",\n    scenario: atomicAndSingleNoSignTxn\n  },\n  {\n    name: \"38. Txn with large note\",\n    scenario: txnWithLargeNote\n  },\n  {\n    name: \"39. Sign single app clear state txn\",\n    scenario: singleAppClearState\n  },\n  {\n    name: \"40. Sign single app create txn\",\n    scenario: singleAppCreate\n  },\n  {\n    name: \"41. Sign single app update txn\",\n    scenario: singleAppUpdate\n  },\n  {\n    name: \"42. Sign single app delete txn\",\n    scenario: singleAppDelete\n  },\n  {\n    name: \"43. Sign single app call with no args\",\n    scenario: singleAppCallNoArgs\n  },\n  {\n    name: \"44. Sign single app create txn with extra page (not working with ledger app v1.2.15)\",\n    scenario: singleAppCreateExtraPage\n  },\n  {\n    name: \"45. Sign asset create + rekey txn\",\n    scenario: assetCreateTxnMaxInfoAndRekey\n  },\n  {\n    name: \"46. Sign asset create txn with minimal info\",\n    scenario: assetCreateTxnMinInfo\n  },\n  {\n    name: \"47. Sign asset reconfig txn\",\n    scenario: assetReconfigTxnResetAll\n  },\n  {\n    name: \"48. Sign asset reconfig txn clear all\",\n    scenario: assetReconfigTxnClearAll\n  },\n  {\n    name: \"49. Sign asset delete txn\",\n    scenario: assetDeleteTxn\n  },\n  {\n    name: \"50. Sign txn group with 0 fee\",\n    scenario: zeroFeeTxnGroup\n  },\n  {\n    name: \"51. Sign 64 transactions\",\n    scenario: maxNumberOfTxns\n  },\n  {\n    name: \"52. Sign 65 transactions\",\n    scenario: tooManyTxns\n  },\n  {\n    name: \"53. Future transaction\",\n    scenario: futureTransaction\n  },\n  {\n    name: \"54. Invalid Grouping issue\",\n    scenario: invalidGroupingIssue\n  },\n  {\n    name: \"55. Application txn with boxes\",\n    scenario: appCallWithBoxes\n  },\n  {\n    name: \"56. Invalid auth address\",\n    scenario: invalidAuthAddress\n  },\n  {\n    name: \"57. Valid auth address\",\n    scenario: validAuthAddress\n  },\n  {\n    name: \"58. Invalid signers\",\n    scenario: invalidSignerAddress\n  },\n  {\n    name: \"59. Valid signers\",\n    scenario: validSignerAddress\n  },\n  {\n    name: \"60. 512 Transactions\",\n    scenario: fiveHundredTxns\n  },\n  {\n    name: \"61. Sign single app opt-in with rekey\",\n    scenario: singleAppOptInWithAppRekey\n  }\n];\n\nexport {createAssetOptInTxn};\n","import {FetcherErrorStatus} from \"./fetcherTypes\";\n\nclass FetcherError extends Error {\n  data: any;\n  type: FetcherErrorStatus;\n  statusCode: number;\n\n  constructor(\n    options: {\n      type: FetcherErrorStatus;\n      data: any;\n      message: string;\n      statusCode: number;\n    },\n    ...args: any[]\n  ) {\n    super(...args);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, FetcherError);\n    }\n\n    this.name = \"FetcherError\";\n    this.type = options.type;\n    this.data = options.data;\n    this.message = options.message;\n    this.statusCode = options.statusCode;\n  }\n}\n\nexport default FetcherError;\n","function fetchJSONMiddleware(response: globalThis.Response) {\n  return response.json().catch((error) => {\n    console.error(\"Response may not support `json` conversion, so suppress the error\");\n    console.error(error);\n    return {};\n  });\n}\n\nexport {fetchJSONMiddleware};\n","import {isRecord} from \"../../utils/object/objectUtils\";\nimport {stringifySearchParams} from \"../../utils/url/urlUtils\";\nimport FetcherError from \"./FetcherError\";\nimport {FetcherConfig, FetcherMiddleware} from \"./fetcherTypes\";\nimport {fetchJSONMiddleware} from \"./fetcherUtils\";\n\nclass Fetcher {\n  readonly config: FetcherConfig;\n\n  constructor(config: FetcherConfig) {\n    this.config = {\n      responseMiddlewares: [fetchJSONMiddleware],\n      rejectMiddlewares: [],\n      ...config,\n      initOptions: {\n        ...(config?.initOptions || {})\n      }\n    };\n  }\n\n  run<Response>(\n    options: Omit<RequestInit, \"method\" | \"body\"> & {\n      method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\" | \"PATCH\" | \"OPTIONS\";\n      params?: Record<string, any>;\n      responseMiddlewares?: FetcherMiddleware[];\n      rejectMiddlewares?: FetcherMiddleware[];\n      body?: any;\n      bodyParser?: (body: any) => any;\n    },\n    path: string\n  ): Promise<Response> {\n    const {baseUrl, initOptions, bodyParser: bodyParserFromConfig} = this.config;\n    const {\n      params,\n      responseMiddlewares,\n      rejectMiddlewares,\n      body,\n      bodyParser: bodyParserFromOptions,\n      ...otherOptions\n    } = options;\n\n    const bodyParser = bodyParserFromOptions || bodyParserFromConfig;\n\n    const url =\n      isRecord(params) && Object.keys(params).length\n        ? `${baseUrl}${path}?${stringifySearchParams(params)}`\n        : `${baseUrl}${path}`;\n\n    const promise = fetch(url, {\n      body: bodyParser ? bodyParser(body) : body,\n      ...initOptions,\n      ...otherOptions\n    });\n\n    return promise\n      .catch((error) => {\n        if (error.name === \"AbortError\") {\n          return Promise.reject(\n            new FetcherError({\n              type: \"Cancelled\",\n              data: error,\n              message: \"Request cancelled\",\n              statusCode: NaN\n            })\n          );\n        }\n\n        return Promise.reject(\n          new FetcherError({\n            type: \"ConnectionError\",\n            data: error,\n            message: \"Network error. Try again later.\",\n            statusCode: NaN\n          })\n        );\n      })\n      .then((response) => {\n        if (response.ok) {\n          return Promise.resolve(response);\n        }\n\n        return Promise.reject(response);\n      })\n      .then(async (response) => {\n        const middlewares = responseMiddlewares || this.config.responseMiddlewares;\n        let final = response;\n\n        if (middlewares) {\n          for (const middleware of middlewares) {\n            final = await middleware(final);\n          }\n        }\n\n        return final as unknown as Promise<Response>;\n      })\n      .catch(async (errorResponse) => {\n        if (errorResponse.status === \"Cancelled\") {\n          return Promise.reject(errorResponse);\n        }\n\n        const middlewares = rejectMiddlewares || this.config.rejectMiddlewares;\n        let finalError;\n\n        try {\n          const errorResponseJSON = await errorResponse.json();\n\n          finalError = new FetcherError({\n            statusCode: errorResponse.status,\n            type: errorResponseJSON?.type || \"ApiError\",\n            data: errorResponseJSON,\n            message:\n              // TODO: generateErrorMessage(errorResponseJSON) ||\n              `${otherOptions.method} ${url} request failed`\n          });\n        } catch {\n          finalError = new FetcherError({\n            statusCode: errorResponse.status,\n            type: \"ApiError\",\n            data: errorResponse,\n            message:\n              // TODO: generateErrorMessage(errorResponse) ||\n              `${otherOptions.method} ${url} request failed`\n          });\n        }\n\n        if (middlewares) {\n          for (const middleware of middlewares) {\n            finalError = await middleware(finalError);\n          }\n        }\n\n        return Promise.reject(finalError);\n      });\n  }\n}\n\nexport default Fetcher;\n","import Fetcher from \"../../../network/fetcher/Fetcher\";\nimport {FetcherConfig} from \"../../../network/fetcher/fetcherTypes\";\nimport {ChainType} from \"../../algod/algod\";\n\nconst PERA_API_URLS = {\n  mainnet: \"https://mainnet.api.perawallet.app/v1/\",\n  testnet: \"https://testnet.api.perawallet.app/v1/\"\n};\n\nconst PERA_API_DEFAULT_OPTIONS: Omit<FetcherConfig, \"baseUrl\"> = {\n  initOptions: {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    }\n  },\n  bodyParser: JSON.stringify\n};\n\nfunction getPeraApiBaseURLForNetwork(network: ChainType) {\n  return network === ChainType.MainNet ? PERA_API_URLS.mainnet : PERA_API_URLS.testnet;\n}\n\nclass PeraApiManager {\n  fetcher: Fetcher;\n\n  constructor(network: ChainType) {\n    this.fetcher = new Fetcher({\n      baseUrl: getPeraApiBaseURLForNetwork(network),\n      ...PERA_API_DEFAULT_OPTIONS\n    });\n  }\n\n  updateFetcher(network: ChainType) {\n    this.fetcher = new Fetcher({\n      baseUrl: getPeraApiBaseURLForNetwork(network),\n      ...PERA_API_DEFAULT_OPTIONS\n    });\n  }\n}\n\nconst peraApiManager = new PeraApiManager(ChainType.TestNet);\n\nexport default peraApiManager;\n","/**\n * Omits provided fields from main object\n * @param obj Target object\n * @param keys Keys to omit from obj\n */\nfunction omitKeys<T extends {[x: string]: any}, K extends keyof T>(obj: T, ...keys: K[]) {\n  const newObj: {[x: string]: any} = {};\n\n  Object.keys(obj).forEach((key) => {\n    // @ts-ignore 'string' is assignable to the constraint of type 'K', but 'K' could be instantiated with a different subtype of constraint 'string | number | symbol'.\n    // couldn't solve this issue\n    if (!keys.includes(key)) {\n      newObj[key as string] = obj[key];\n    }\n  });\n\n  return newObj as Omit<T, K>;\n}\n\n/**\n * Checks the given value if the value is object and not an array or null.\n * @param {unknown} x The value to check.\n * @returns {boolean} Returns `true` if `value` is an object and not an array or null, else returns `false`.\n * @example\n *\n * isRecord({})\n * // => true\n *\n * isRecord({a: \"1\"})\n * // => true\n *\n * isRecord(new Foo);\n * // => true\n *\n * isRecord([1, 2, 3])\n * // => false\n *\n * isRecord(Function)\n * // => false\n *\n * isRecord(null)\n * // => false\n */\nfunction isRecord(x: unknown): x is Record<string, any> {\n  return typeof x === \"object\" && Boolean(x) && !Array.isArray(x);\n}\n\nexport {omitKeys, isRecord};\n","/**\n * Initiates URLSearchParams with the provided params object and stringifies it\n * @param {object} params A params object.\n * @returns {string} Stringified search string\n * @example\n *\n * stringifySearchParams({a: \"123\"})\n * // => \"a=123\"\n *\n * stringifySearchParams({a: 1, b: \"test\", c: true})\n * // => \"a=1&b=test&c=true\"\n */\nfunction stringifySearchParams<Params extends Record<string, any>>(params: Params) {\n  return new URLSearchParams(params).toString();\n}\n\n/**\n * Converts query string into a params object (all values of the object are strings).\n * @param {string} search Url query string\n * @return {object} Query params object\n */\nfunction getSearchParams<T = Record<string, undefined | string>>(search: string) {\n  return Object.fromEntries(new URLSearchParams(search).entries()) as unknown as T;\n}\n\nexport {stringifySearchParams, getSearchParams};\n","import {useLayoutEffect} from \"react\";\n\nfunction useOnUnmount(callback?: VoidFunction) {\n  useLayoutEffect(() => {\n    return () => {\n      if (callback) {\n        callback();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n}\n\nexport default useOnUnmount;\n","import {useCallback, useEffect, useRef, useState} from \"react\";\n\nimport useOnUnmount from \"../useOnUnmount/useOnUnmount\";\n\nconst DEFAULT_INITIAL_ASYNC_PROCESS_STATE: AsyncProcessState = {\n  isPending: false,\n  isFetched: false,\n  data: null,\n  error: null\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-constraint\nfunction useAsyncProcess<Data extends any>(options?: UseAsyncProcessOptions<Data>) {\n  const {initialState, shouldResetDataWhenPending = true} = options || {};\n  const [asyncState, setAsyncState] = useState<AsyncProcessState<Data>>(\n    initialState || DEFAULT_INITIAL_ASYNC_PROCESS_STATE\n  );\n  const latestDataRef = useRef(asyncState.data);\n  const isUnmountedRef = useRef(false);\n  const asyncStateSetter = useCallback<AsyncStateSetter<Data>>(\n    (state) => (isUnmountedRef.current ? () => undefined : setAsyncState(state)),\n    []\n  );\n\n  const runAsyncProcess: AsyncProcessCallBack<Data> = useCallback(\n    (promise, responseSerializer) => {\n      asyncStateSetter({\n        isPending: true,\n        isFetched: false,\n        data: shouldResetDataWhenPending ? null : latestDataRef.current,\n        error: null\n      });\n\n      promise\n        .then((response) => {\n          asyncStateSetter({\n            isPending: false,\n            isFetched: true,\n            data: responseSerializer ? responseSerializer(response) : response,\n            error: null\n          });\n        })\n        .catch((error) => {\n          asyncStateSetter({\n            isPending: false,\n            isFetched: true,\n            data: null,\n            error\n          });\n        });\n\n      return promise;\n    },\n    [asyncStateSetter, shouldResetDataWhenPending]\n  );\n\n  useEffect(() => {\n    latestDataRef.current = asyncState.data;\n  }, [asyncState.data]);\n\n  useOnUnmount(() => {\n    isUnmountedRef.current = true;\n  });\n\n  return {\n    state: asyncState,\n    setState: asyncStateSetter,\n    runAsyncProcess\n  };\n}\n\nexport {DEFAULT_INITIAL_ASYNC_PROCESS_STATE};\nexport default useAsyncProcess;\n","import peraApiManager from \"./peraApiManager\";\n\nconst PERA_API_PAGINATED_RESPONSE_LIMIT = 50;\n\nexport interface Asset {\n  asset_id: number;\n  name: string;\n  unit_name: string;\n}\n\nconst peraApi = {\n  getAssets(params?: ListRequestParams, options?: {signal: AbortSignal}) {\n    return peraApiManager.fetcher.run<ListRequestResponse<Asset>>(\n      {method: \"GET\", params, signal: options?.signal},\n      \"assets/\"\n    );\n  }\n};\n\nexport default peraApi;\nexport {PERA_API_PAGINATED_RESPONSE_LIMIT};\n"],"sourceRoot":""}